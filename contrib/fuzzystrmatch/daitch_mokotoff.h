/*
 * Types and lookup tables for Daitch-Mokotoff Soundex
 *
 * Copyright (c) 2021 Finance Norway
 * Author: Dag Lem <dag@nimrod.no>
 *
 * This file is generated by daitch_mokotoff_header.pl
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE AUTHOR OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE AUTHOR OR DISTRIBUTORS HAVE BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * THE AUTHOR AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE AUTHOR AND DISTRIBUTORS HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */

#include <stdlib.h>

#define DM_MAX_CODE_DIGITS 6
#define DM_MAX_ALTERNATE_CODES 5
#define DM_MAX_NODES 1564
#define DM_MAX_LEAVES 1250
#define DM_MAX_SOUNDEX_CHARS (DM_MAX_NODES*(DM_MAX_CODE_DIGITS + 1))

typedef char dm_code[2 + 1];	/* One or two sequential code digits + NUL */
typedef dm_code dm_codes[3];	/* Start of name, before a vowel, any other */

/* Letter in input sequence */
struct dm_letter
{
	char		letter;			/* Present letter in sequence */
	struct dm_letter *letters;	/* List of possible successive letters */
	dm_codes   *codes;			/* Code sequence(s) for complete sequence */
};

/* Node in soundex code tree */
struct dm_node
{
	int			soundex_length; /* Length of generated soundex code */
	char		soundex[DM_MAX_CODE_DIGITS + 1];	/* Soundex code */
	int			is_leaf;		/* Candidate for complete soundex code */
	int			last_update;	/* Letter number for last update of node */
	char		code_digit;		/* Last code digit, 0 - 9 */

	/*
	 * One or two alternate code digits leading to this node. If there are two
	 * digits, one of them is always an 'X'. Repeated code digits and 'X' lead
	 * back to the same node.
	 */
	char		prev_code_digits[2];
	/* One or two alternate code digits moving forward. */
	char		next_code_digits[2];
	/* ORed together code index(es) used to reach current node. */
	int			prev_code_index;
	int			next_code_index;
	/* Nodes branching out from this node. */
	struct dm_node *next_nodes[DM_MAX_ALTERNATE_CODES + 1];
};

typedef struct dm_letter dm_letter;
typedef struct dm_node dm_node;

/* Codes for letter sequence at start of name, before a vowel, and any other. */
static dm_codes codes_0_1_X[2] =
{
	{
		"0", "1", "X"
	}
};
static dm_codes codes_0_7_X[2] =
{
	{
		"0", "7", "X"
	}
};
static dm_codes codes_0_X_X[2] =
{
	{
		"0", "X", "X"
	}
};
static dm_codes codes_1_1_X[2] =
{
	{
		"1", "1", "X"
	}
};
static dm_codes codes_1_X_X[2] =
{
	{
		"1", "X", "X"
	}
};
static dm_codes codes_1_X_X_or_4_4_4[2] =
{
	{
		"1", "X", "X"
	},
	{
		"4", "4", "4"
	}
};
static dm_codes codes_2_43_43[2] =
{
	{
		"2", "43", "43"
	}
};
static dm_codes codes_2_4_4[2] =
{
	{
		"2", "4", "4"
	}
};
static dm_codes codes_3_3_3[2] =
{
	{
		"3", "3", "3"
	}
};
static dm_codes codes_3_3_3_or_4_4_4[2] =
{
	{
		"3", "3", "3"
	},
	{
		"4", "4", "4"
	}
};
static dm_codes codes_4_4_4[2] =
{
	{
		"4", "4", "4"
	}
};
static dm_codes codes_5_54_54[2] =
{
	{
		"5", "54", "54"
	}
};
static dm_codes codes_5_5_5[2] =
{
	{
		"5", "5", "5"
	}
};
static dm_codes codes_5_5_5_or_45_45_45[2] =
{
	{
		"5", "5", "5"
	},
	{
		"45", "45", "45"
	}
};
static dm_codes codes_5_5_5_or_4_4_4[2] =
{
	{
		"5", "5", "5"
	},
	{
		"4", "4", "4"
	}
};
static dm_codes codes_5_5_X[2] =
{
	{
		"5", "5", "X"
	}
};
static dm_codes codes_66_66_66[2] =
{
	{
		"66", "66", "66"
	}
};
static dm_codes codes_6_6_6[2] =
{
	{
		"6", "6", "6"
	}
};
static dm_codes codes_7_7_7[2] =
{
	{
		"7", "7", "7"
	}
};
static dm_codes codes_8_8_8[2] =
{
	{
		"8", "8", "8"
	}
};
static dm_codes codes_94_94_94_or_4_4_4[2] =
{
	{
		"94", "94", "94"
	},
	{
		"4", "4", "4"
	}
};
static dm_codes codes_9_9_9[2] =
{
	{
		"9", "9", "9"
	}
};
static dm_codes codes_X_X_6_or_X_X_X[2] =
{
	{
		"X", "X", "6"
	},
	{
		"X", "X", "X"
	}
};

/* Coding for alternative following letters in sequence. */
static dm_letter letter_A[] =
{
	{
		'I', NULL, codes_0_1_X
	},
	{
		'J', NULL, codes_0_1_X
	},
	{
		'U', NULL, codes_0_7_X
	},
	{
		'Y', NULL, codes_0_1_X
	},
	{
		'\0'
	}
};
static dm_letter letter_CH[] =
{
	{
		'S', NULL, codes_5_54_54
	},
	{
		'\0'
	}
};
static dm_letter letter_CS[] =
{
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_CZ[] =
{
	{
		'S', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_C[] =
{
	{
		'H', letter_CH, codes_5_5_5_or_4_4_4
	},
	{
		'K', NULL, codes_5_5_5_or_45_45_45
	},
	{
		'S', letter_CS, codes_4_4_4
	},
	{
		'Z', letter_CZ, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_DR[] =
{
	{
		'S', NULL, codes_4_4_4
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_DS[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_DZ[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'S', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_D[] =
{
	{
		'R', letter_DR, NULL
	},
	{
		'S', letter_DS, codes_4_4_4
	},
	{
		'T', NULL, codes_3_3_3
	},
	{
		'Z', letter_DZ, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_E[] =
{
	{
		'I', NULL, codes_0_1_X
	},
	{
		'J', NULL, codes_0_1_X
	},
	{
		'U', NULL, codes_1_1_X
	},
	{
		'Y', NULL, codes_0_1_X
	},
	{
		'\0'
	}
};
static dm_letter letter_F[] =
{
	{
		'B', NULL, codes_7_7_7
	},
	{
		'\0'
	}
};
static dm_letter letter_I[] =
{
	{
		'A', NULL, codes_1_X_X
	},
	{
		'E', NULL, codes_1_X_X
	},
	{
		'O', NULL, codes_1_X_X
	},
	{
		'U', NULL, codes_1_X_X
	},
	{
		'\0'
	}
};
static dm_letter letter_K[] =
{
	{
		'H', NULL, codes_5_5_5
	},
	{
		'S', NULL, codes_5_54_54
	},
	{
		'\0'
	}
};
static dm_letter letter_M[] =
{
	{
		'N', NULL, codes_66_66_66
	},
	{
		'\0'
	}
};
static dm_letter letter_N[] =
{
	{
		'M', NULL, codes_66_66_66
	},
	{
		'\0'
	}
};
static dm_letter letter_O[] =
{
	{
		'I', NULL, codes_0_1_X
	},
	{
		'J', NULL, codes_0_1_X
	},
	{
		'Y', NULL, codes_0_1_X
	},
	{
		'\0'
	}
};
static dm_letter letter_P[] =
{
	{
		'F', NULL, codes_7_7_7
	},
	{
		'H', NULL, codes_7_7_7
	},
	{
		'\0'
	}
};
static dm_letter letter_R[] =
{
	{
		'S', NULL, codes_94_94_94_or_4_4_4
	},
	{
		'Z', NULL, codes_94_94_94_or_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SCHTC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SCHTSC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SCHTS[] =
{
	{
		'C', letter_SCHTSC, NULL
	},
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SCHT[] =
{
	{
		'C', letter_SCHTC, NULL
	},
	{
		'S', letter_SCHTS, NULL
	},
	{
		'\0'
	}
};
static dm_letter letter_SCH[] =
{
	{
		'D', NULL, codes_2_43_43
	},
	{
		'T', letter_SCHT, codes_2_43_43
	},
	{
		'\0'
	}
};
static dm_letter letter_SC[] =
{
	{
		'H', letter_SCH, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SHC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SHTC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SHTS[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SHT[] =
{
	{
		'C', letter_SHTC, NULL
	},
	{
		'S', letter_SHTS, NULL
	},
	{
		'\0'
	}
};
static dm_letter letter_SH[] =
{
	{
		'C', letter_SHC, NULL
	},
	{
		'D', NULL, codes_2_43_43
	},
	{
		'T', letter_SHT, codes_2_43_43
	},
	{
		'\0'
	}
};
static dm_letter letter_STC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_STR[] =
{
	{
		'S', NULL, codes_2_4_4
	},
	{
		'Z', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_STSC[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_STS[] =
{
	{
		'C', letter_STSC, NULL
	},
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_ST[] =
{
	{
		'C', letter_STC, NULL
	},
	{
		'R', letter_STR, NULL
	},
	{
		'S', letter_STS, NULL
	},
	{
		'\0'
	}
};
static dm_letter letter_SZC[] =
{
	{
		'S', NULL, codes_2_4_4
	},
	{
		'Z', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_SZ[] =
{
	{
		'C', letter_SZC, NULL
	},
	{
		'D', NULL, codes_2_43_43
	},
	{
		'T', NULL, codes_2_43_43
	},
	{
		'\0'
	}
};
static dm_letter letter_S[] =
{
	{
		'C', letter_SC, codes_2_4_4
	},
	{
		'D', NULL, codes_2_43_43
	},
	{
		'H', letter_SH, codes_4_4_4
	},
	{
		'T', letter_ST, codes_2_43_43
	},
	{
		'Z', letter_SZ, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TC[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TR[] =
{
	{
		'S', NULL, codes_4_4_4
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TSC[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TS[] =
{
	{
		'C', letter_TSC, NULL
	},
	{
		'H', NULL, codes_4_4_4
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TTC[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TTSC[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TTS[] =
{
	{
		'C', letter_TTSC, NULL
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TT[] =
{
	{
		'C', letter_TTC, NULL
	},
	{
		'S', letter_TTS, codes_4_4_4
	},
	{
		'Z', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_TZ[] =
{
	{
		'S', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_T[] =
{
	{
		'C', letter_TC, codes_4_4_4
	},
	{
		'H', NULL, codes_3_3_3
	},
	{
		'R', letter_TR, NULL
	},
	{
		'S', letter_TS, codes_4_4_4
	},
	{
		'T', letter_TT, NULL
	},
	{
		'Z', letter_TZ, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_U[] =
{
	{
		'E', NULL, codes_0_1_X
	},
	{
		'I', NULL, codes_0_1_X
	},
	{
		'J', NULL, codes_0_1_X
	},
	{
		'Y', NULL, codes_0_1_X
	},
	{
		'\0'
	}
};
static dm_letter letter_ZDZ[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_ZD[] =
{
	{
		'Z', letter_ZDZ, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_ZHDZ[] =
{
	{
		'H', NULL, codes_2_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_ZHD[] =
{
	{
		'Z', letter_ZHDZ, NULL
	},
	{
		'\0'
	}
};
static dm_letter letter_ZH[] =
{
	{
		'D', letter_ZHD, codes_2_43_43
	},
	{
		'\0'
	}
};
static dm_letter letter_ZSC[] =
{
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_ZS[] =
{
	{
		'C', letter_ZSC, NULL
	},
	{
		'H', NULL, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_Z[] =
{
	{
		'D', letter_ZD, codes_2_43_43
	},
	{
		'H', letter_ZH, codes_4_4_4
	},
	{
		'S', letter_ZS, codes_4_4_4
	},
	{
		'\0'
	}
};
static dm_letter letter_[] =
{
	{
		'A', letter_A, codes_0_X_X
	},
	{
		'B', NULL, codes_7_7_7
	},
	{
		'C', letter_C, codes_5_5_5_or_4_4_4
	},
	{
		'D', letter_D, codes_3_3_3
	},
	{
		'E', letter_E, codes_0_X_X
	},
	{
		'F', letter_F, codes_7_7_7
	},
	{
		'G', NULL, codes_5_5_5
	},
	{
		'H', NULL, codes_5_5_X
	},
	{
		'I', letter_I, codes_0_X_X
	},
	{
		'J', NULL, codes_1_X_X_or_4_4_4
	},
	{
		'K', letter_K, codes_5_5_5
	},
	{
		'L', NULL, codes_8_8_8
	},
	{
		'M', letter_M, codes_6_6_6
	},
	{
		'N', letter_N, codes_6_6_6
	},
	{
		'O', letter_O, codes_0_X_X
	},
	{
		'P', letter_P, codes_7_7_7
	},
	{
		'Q', NULL, codes_5_5_5
	},
	{
		'R', letter_R, codes_9_9_9
	},
	{
		'S', letter_S, codes_4_4_4
	},
	{
		'T', letter_T, codes_3_3_3
	},
	{
		'U', letter_U, codes_0_X_X
	},
	{
		'V', NULL, codes_7_7_7
	},
	{
		'W', NULL, codes_7_7_7
	},
	{
		'X', NULL, codes_5_54_54
	},
	{
		'Y', NULL, codes_1_X_X
	},
	{
		'Z', letter_Z, codes_4_4_4
	},
	{
		'a', NULL, codes_X_X_6_or_X_X_X
	},
	{
		'e', NULL, codes_X_X_6_or_X_X_X
	},
	{
		't', NULL, codes_3_3_3_or_4_4_4
	},
	{
		'\0'
	}
};
