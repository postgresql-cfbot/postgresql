-- Tests for UPDATE/DELETE FOR PORTION OF
-- Works on non-PK columns
CREATE TABLE for_portion_of_test (
  id int4range,
  valid_at tsrange,
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,2)', '[2018-01-02,2020-01-01)', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-15' TO '2019-01-01'
SET name = 'foo';
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2019-01-15' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid_at                         | name 
-------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Tue Jan 01 00:00:00 2019") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Tue Jan 01 00:00:00 2019","Tue Jan 15 00:00:00 2019") | one
(3 rows)

-- Works on more than one period
DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range,
  valid1_at tsrange,
  valid2_at tsrange,
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,2)', '[2018-01-02,2018-02-03)', '[2015-01-01,2025-01-01)', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'foo';
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Wed Jan 01 00:00:00 2025") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Wed Jan 01 00:00:00 2025") | one
(2 rows)

UPDATE for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'bar';
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | bar
(4 rows)

DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range NOT NULL,
  valid_at tsrange NOT NULL,
  name text NOT NULL,
	CONSTRAINT for_portion_of_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
INSERT INTO for_portion_of_test
VALUES
('[1,2)', '[2018-01-02,2018-02-03)', 'one'),
('[1,2)', '[2018-02-03,2018-03-03)', 'one'),
('[1,2)', '[2018-03-03,2018-04-04)', 'one'),
('[2,3)', '[2018-01-01,2018-01-05)', 'two'),
('[3,4)', '[2018-01-01,)', 'three'),
('[4,5)', '(,2018-04-01)', 'four'),
('[5,6)', '(,)', 'five')
;
--
-- UPDATE tests
--
-- Setting with a missing column fails
UPDATE for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'foo'
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
                       ^
-- Setting the range fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET valid_at = '[1990-01-01,1999-01-01)'
WHERE id = '[5,6)';
ERROR:  can't directly assign to "valid_at" in a FOR PORTION OF update
LINE 3: SET valid_at = '[1990-01-01,1999-01-01)'
            ^
-- The wrong type fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM 1 TO 4
SET name = 'nope'
WHERE id = '[3,4)';
ERROR:  function pg_catalog.tsrange(integer, integer) does not exist
LINE 2: FOR PORTION OF valid_at FROM 1 TO 4
                       ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Setting with timestamps reversed fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
SET name = 'three^1'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Setting with a subquery fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-06-01'
SET name = 'nope'
WHERE id = '[3,4)';
ERROR:  cannot use subquery in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-...
                                     ^
-- Setting with a column fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM lower(valid_at) TO UNBOUNDED
SET name = 'nope'
WHERE id = '[3,4)';
ERROR:  cannot use column reference in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM lower(valid_at) TO UNBOUNDED
                                           ^
-- Setting with timestamps equal does nothing
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
SET name = 'three^0'
WHERE id = '[3,4)';
-- Updating a finite/open portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'three^1'
WHERE id = '[3,4)';
-- Updating a finite/open portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-03-01'
SET name = 'three^2'
WHERE id = '[3,4)';
-- Updating an open/finite portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-02-01'
SET name = 'four^1'
WHERE id = '[4,5)';
-- Updating an open/finite portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO UNBOUNDED
SET name = 'four^2'
WHERE id = '[4,5)';
-- Updating a finite/finite portion with an exact fit
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2018-02-01'
SET name = 'four^3'
WHERE id = '[4,5)';
-- Updating an enclosed span
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO UNBOUNDED
SET name = 'two^2'
WHERE id = '[2,3)';
-- Updating an open/open portion with a finite/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-01' TO '2019-01-01'
SET name = 'five^2'
WHERE id = '[5,6)';
-- Updating an enclosed span with separate protruding spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2020-01-01'
SET name = 'five^3'
WHERE id = '[5,6)';
-- Updating multiple enclosed spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
SET name = 'one^2'
WHERE id = '[1,2)';
-- Updating with a shift/reduce conflict
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '1' HOUR TO MINUTE
  TO '2019-01-01'
SET name = 'one^3'
WHERE id = '[1,2)';
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '2' HOUR
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,2)';
ERROR:  syntax error at or near "'2019-01-01'"
LINE 4:   TO '2019-01-01'
             ^
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM ('2018-03-01' AT TIME ZONE INTERVAL '2' HOUR)
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,2)';
-- Updating the non-range part of the PK:
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-15' TO NULL
SET id = '[6,7)'
WHERE id = '[1,2)';
-- UPDATE with no WHERE clause
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2030-01-01' TO NULL
SET name = name || '*';
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |   name   
-------+---------------------------------------------------------+----------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Sat Feb 03 00:00:00 2018") | one^2
 [1,2) | ["Sat Feb 03 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | three
 [3,4) | ["Fri Jun 01 00:00:00 2018","Tue Jan 01 00:00:00 2030") | three^1
 [3,4) | ["Tue Jan 01 00:00:00 2030",)                           | three^1*
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Tue Jan 01 00:00:00 2019") | five^3
 [5,6) | ["Tue Jan 01 00:00:00 2019","Wed Jan 01 00:00:00 2020") | five^3
 [5,6) | ["Wed Jan 01 00:00:00 2020","Tue Jan 01 00:00:00 2030") | five
 [5,6) | ["Tue Jan 01 00:00:00 2030",)                           | five*
 [6,7) | ["Thu Feb 15 00:00:00 2018","Thu Mar 01 08:01:00 2018") | one^2
 [6,7) | ["Thu Mar 01 08:01:00 2018","Thu Mar 01 10:00:00 2018") | one^3
 [6,7) | ["Thu Mar 01 10:00:00 2018","Sat Mar 03 00:00:00 2018") | one^4
 [6,7) | ["Sat Mar 03 00:00:00 2018","Wed Apr 04 00:00:00 2018") | one^4
(20 rows)

--
-- DELETE tests
--
-- Deleting with a missing column fails
DELETE FROM for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
                       ^
-- Deleting with timestamps reversed fails
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Deleting with timestamps equal does nothing
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
WHERE id = '[3,4)';
-- Deleting with a closed/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2020-06-01'
WHERE id = '[5,6)';
-- Deleting with a closed/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO NULL
WHERE id = '[3,4)';
-- Deleting with an open/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO '2018-02-08'
WHERE id = '[1,2)';
-- Deleting with an open/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
WHERE id = '[6,7)';
-- DELETE with no WHERE clause
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2025-01-01' TO NULL;
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [1,2) | ["Thu Feb 08 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | three
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025") | five
(11 rows)

-- UPDATE ... RETURNING returns only the updated values (not the inserted side values)
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-01' TO '2018-02-15'
SET name = 'three^3'
WHERE id = '[3,4)'
RETURNING *;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [3,4) | ["Thu Feb 01 00:00:00 2018","Thu Feb 15 00:00:00 2018") | three^3
(1 row)

-- test that we run triggers on the UPDATE/DELETEd row and the INSERTed rows
CREATE FUNCTION for_portion_of_trigger()
RETURNS trigger
AS
$$
BEGIN
  RAISE NOTICE '% % % of %', TG_WHEN, TG_OP, NEW.valid_at, OLD.valid_at;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$
LANGUAGE plpgsql;
CREATE TRIGGER trg_for_portion_of_before_insert
  BEFORE INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_insert
  AFTER INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_update
  BEFORE UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_update
  AFTER UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_delete
  BEFORE DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_delete
  AFTER DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2021-01-01' TO '2022-01-01'
SET name = 'five^4'
WHERE id = '[5,6)';
NOTICE:  BEFORE UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2023-01-01' TO '2024-01-01'
WHERE id = '[5,6)';
NOTICE:  BEFORE DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  BEFORE INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [1,2) | ["Thu Feb 08 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Feb 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Feb 01 00:00:00 2018","Thu Feb 15 00:00:00 2018") | three^3
 [3,4) | ["Thu Feb 15 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | three
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") | five
 [5,6) | ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") | five^4
 [5,6) | ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") | five
 [5,6) | ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") | five
(16 rows)

--
-- Now re-run the same tests but with a PERIOD instead of a range:
--
DROP TABLE for_portion_of_test;
-- Works on non-PK columns
CREATE TABLE for_portion_of_test (
  id int4range,
  valid_from timestamp,
  valid_til timestamp,
  PERIOD FOR valid_at (valid_from, valid_til),
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,2)', '2018-01-02', '2020-01-01', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-15' TO '2019-01-01'
SET name = 'foo';
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2019-01-15' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |        valid_from        |        valid_til         | name 
-------+--------------------------+--------------------------+------
 [1,2) | Mon Jan 15 00:00:00 2018 | Tue Jan 01 00:00:00 2019 | foo
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | one
 [1,2) | Tue Jan 01 00:00:00 2019 | Tue Jan 15 00:00:00 2019 | one
(3 rows)

-- Works on more than one period
DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range,
  valid1_from timestamp,
  valid1_til timestamp,
  valid2_from timestamp,
  valid2_til timestamp,
  PERIOD FOR valid1_at (valid1_from, valid1_til),
  PERIOD FOR valid2_at (valid2_from, valid2_til),
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,2)', '2018-01-02', '2018-02-03', '2015-01-01', '2025-01-01', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'foo';
SELECT * FROM for_portion_of_test;
  id   |       valid1_from        |        valid1_til        |       valid2_from        |        valid2_til        | name 
-------+--------------------------+--------------------------+--------------------------+--------------------------+------
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Feb 03 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Wed Jan 01 00:00:00 2025 | foo
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Wed Jan 01 00:00:00 2025 | one
(2 rows)

UPDATE for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'bar';
SELECT * FROM for_portion_of_test;
  id   |       valid1_from        |        valid1_til        |       valid2_from        |        valid2_til        | name 
-------+--------------------------+--------------------------+--------------------------+--------------------------+------
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Feb 03 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Wed Jan 01 00:00:00 2025 | bar
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Feb 03 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | foo
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Wed Jan 01 00:00:00 2025 | bar
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | one
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |       valid1_from        |        valid1_til        |       valid2_from        |        valid2_til        | name 
-------+--------------------------+--------------------------+--------------------------+--------------------------+------
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Wed Jan 01 00:00:00 2025 | bar
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | one
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Wed Jan 01 00:00:00 2025 | bar
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | foo
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |       valid1_from        |        valid1_til        |       valid2_from        |        valid2_til        | name 
-------+--------------------------+--------------------------+--------------------------+--------------------------+------
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | one
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | Thu Jan 01 00:00:00 2015 | Mon Jan 15 00:00:00 2018 | foo
 [1,2) | Tue Jan 02 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | bar
 [1,2) | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | Mon Jan 15 00:00:00 2018 | Sat Jan 20 00:00:00 2018 | bar
(4 rows)

DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range NOT NULL,
  valid_from timestamp,
  valid_til timestamp,
  PERIOD FOR valid_at (valid_from, valid_til),
  name text NOT NULL,
	CONSTRAINT for_portion_of_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
INSERT INTO for_portion_of_test
VALUES
('[1,2)', '2018-01-02', '2018-02-03', 'one'),
('[1,2)', '2018-02-03', '2018-03-03', 'one'),
('[1,2)', '2018-03-03', '2018-04-04', 'one'),
('[2,3)', '2018-01-01', '2018-01-05', 'two'),
('[3,4)', '2018-01-01', null, 'three'),
('[4,5)', null, '2018-04-01', 'four'),
('[5,6)', null, null, 'five')
;
--
-- UPDATE tests
--
-- Setting with a missing column fails
UPDATE for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'foo'
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
                       ^
-- Setting the start column fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET valid_from = '1990-01-01'
WHERE id = '[5,6)';
ERROR:  can't directly assign to "valid_from" in a FOR PORTION OF update
LINE 3: SET valid_from = '1990-01-01'
            ^
-- Setting the end column fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET valid_til = '1999-01-01'
WHERE id = '[5,6)';
ERROR:  can't directly assign to "valid_til" in a FOR PORTION OF update
LINE 3: SET valid_til = '1999-01-01'
            ^
-- Setting with timestamps reversed fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
SET name = 'three^1'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Setting with a subquery fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-06-01'
SET name = 'nope'
WHERE id = '[3,4)';
ERROR:  cannot use subquery in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-...
                                     ^
-- Setting with a column fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM valid_from TO UNBOUNDED
SET name = 'nope'
WHERE id = '[3,4)';
ERROR:  cannot use column reference in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM valid_from TO UNBOUNDED
                                     ^
-- Setting with timestamps equal does nothing
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
SET name = 'three^0'
WHERE id = '[3,4)';
-- Updating a finite/open portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'three^1'
WHERE id = '[3,4)';
-- Updating a finite/open portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-03-01'
SET name = 'three^2'
WHERE id = '[3,4)';
-- Updating an open/finite portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-02-01'
SET name = 'four^1'
WHERE id = '[4,5)';
-- Updating an open/finite portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO UNBOUNDED
SET name = 'four^2'
WHERE id = '[4,5)';
-- Updating a finite/finite portion with an exact fit
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2018-02-01'
SET name = 'four^3'
WHERE id = '[4,5)';
-- Updating an enclosed span
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO UNBOUNDED
SET name = 'two^2'
WHERE id = '[2,3)';
-- Updating an open/open portion with a finite/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-01' TO '2019-01-01'
SET name = 'five^2'
WHERE id = '[5,6)';
-- Updating an enclosed span with separate protruding spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2020-01-01'
SET name = 'five^3'
WHERE id = '[5,6)';
-- Updating multiple enclosed spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
SET name = 'one^2'
WHERE id = '[1,2)';
-- Updating with a shift/reduce conflict
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '1' HOUR TO MINUTE
  TO '2019-01-01'
SET name = 'one^3'
WHERE id = '[1,2)';
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '2' HOUR
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,2)';
ERROR:  syntax error at or near "'2019-01-01'"
LINE 4:   TO '2019-01-01'
             ^
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM ('2018-03-01' AT TIME ZONE INTERVAL '2' HOUR)
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,2)';
-- Updating the non-range part of the PK:
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-15' TO NULL
SET id = '[6,7)'
WHERE id = '[1,2)';
-- UPDATE with no WHERE clause
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2030-01-01' TO NULL
SET name = name || '*';
-- TODO: UPDATE with generated columns too
SELECT * FROM for_portion_of_test ORDER BY id, valid_from NULLS FIRST, valid_til;
  id   |        valid_from        |        valid_til         |   name   
-------+--------------------------+--------------------------+----------
 [1,2) | Tue Jan 02 00:00:00 2018 | Sat Feb 03 00:00:00 2018 | one^2
 [1,2) | Sat Feb 03 00:00:00 2018 | Thu Feb 15 00:00:00 2018 | one^2
 [2,3) | Mon Jan 01 00:00:00 2018 | Fri Jan 05 00:00:00 2018 | two^2
 [3,4) | Mon Jan 01 00:00:00 2018 | Thu Mar 01 00:00:00 2018 | three^2
 [3,4) | Thu Mar 01 00:00:00 2018 | Fri Jun 01 00:00:00 2018 | three
 [3,4) | Fri Jun 01 00:00:00 2018 | Tue Jan 01 00:00:00 2030 | three^1
 [3,4) | Tue Jan 01 00:00:00 2030 |                          | three^1*
 [4,5) |                          | Sun Jan 01 00:00:00 2017 | four^1
 [4,5) | Sun Jan 01 00:00:00 2017 | Thu Feb 01 00:00:00 2018 | four^3
 [4,5) | Thu Feb 01 00:00:00 2018 | Sun Apr 01 00:00:00 2018 | four^2
 [5,6) |                          | Sun Jan 01 00:00:00 2017 | five
 [5,6) | Sun Jan 01 00:00:00 2017 | Mon Jan 01 00:00:00 2018 | five^3
 [5,6) | Mon Jan 01 00:00:00 2018 | Tue Jan 01 00:00:00 2019 | five^3
 [5,6) | Tue Jan 01 00:00:00 2019 | Wed Jan 01 00:00:00 2020 | five^3
 [5,6) | Wed Jan 01 00:00:00 2020 | Tue Jan 01 00:00:00 2030 | five
 [5,6) | Tue Jan 01 00:00:00 2030 |                          | five*
 [6,7) | Thu Feb 15 00:00:00 2018 | Thu Mar 01 08:01:00 2018 | one^2
 [6,7) | Thu Mar 01 08:01:00 2018 | Thu Mar 01 10:00:00 2018 | one^3
 [6,7) | Thu Mar 01 10:00:00 2018 | Sat Mar 03 00:00:00 2018 | one^4
 [6,7) | Sat Mar 03 00:00:00 2018 | Wed Apr 04 00:00:00 2018 | one^4
(20 rows)

--
-- DELETE tests
--
-- Deleting with a missing column fails
DELETE FROM for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
WHERE id = '[5,6)';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
                       ^
-- Deleting with timestamps reversed fails
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
WHERE id = '[3,4)';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Deleting with timestamps equal does nothing
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
WHERE id = '[3,4)';
-- Deleting with a closed/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2020-06-01'
WHERE id = '[5,6)';
-- Deleting with a closed/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO NULL
WHERE id = '[3,4)';
-- Deleting with an open/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO '2018-02-08'
WHERE id = '[1,2)';
-- Deleting with an open/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
WHERE id = '[6,7)';
-- DELETE with no WHERE clause
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2025-01-01' TO NULL;
SELECT * FROM for_portion_of_test ORDER BY id, valid_from NULLS FIRST, valid_til;
  id   |        valid_from        |        valid_til         |  name   
-------+--------------------------+--------------------------+---------
 [1,2) | Thu Feb 08 00:00:00 2018 | Thu Feb 15 00:00:00 2018 | one^2
 [2,3) | Mon Jan 01 00:00:00 2018 | Fri Jan 05 00:00:00 2018 | two^2
 [3,4) | Mon Jan 01 00:00:00 2018 | Thu Mar 01 00:00:00 2018 | three^2
 [3,4) | Thu Mar 01 00:00:00 2018 | Sun Apr 01 00:00:00 2018 | three
 [4,5) |                          | Sun Jan 01 00:00:00 2017 | four^1
 [4,5) | Sun Jan 01 00:00:00 2017 | Thu Feb 01 00:00:00 2018 | four^3
 [4,5) | Thu Feb 01 00:00:00 2018 | Sun Apr 01 00:00:00 2018 | four^2
 [5,6) |                          | Sun Jan 01 00:00:00 2017 | five
 [5,6) | Sun Jan 01 00:00:00 2017 | Mon Jan 01 00:00:00 2018 | five^3
 [5,6) | Mon Jan 01 00:00:00 2018 | Fri Jun 01 00:00:00 2018 | five^3
 [5,6) | Mon Jun 01 00:00:00 2020 | Wed Jan 01 00:00:00 2025 | five
(11 rows)

-- UPDATE ... RETURNING returns only the updated values (not the inserted side values)
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-01' TO '2018-02-15'
SET name = 'three^3'
WHERE id = '[3,4)'
RETURNING *;
  id   |        valid_from        |        valid_til         |  name   
-------+--------------------------+--------------------------+---------
 [3,4) | Thu Feb 01 00:00:00 2018 | Thu Feb 15 00:00:00 2018 | three^3
(1 row)

-- test that we run triggers on the UPDATE/DELETEd row and the INSERTed rows
CREATE FUNCTION for_portion_of_trigger2()
RETURNS trigger
AS
$$
BEGIN
  RAISE NOTICE '% % [%,%) of [%,%)', TG_WHEN, TG_OP, NEW.valid_from, NEW.valid_til, OLD.valid_from, OLD.valid_til;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$
LANGUAGE plpgsql;
CREATE TRIGGER trg_for_portion_of_before_insert
  BEFORE INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
CREATE TRIGGER trg_for_portion_of_after_insert
  AFTER INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
CREATE TRIGGER trg_for_portion_of_before_update
  BEFORE UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
CREATE TRIGGER trg_for_portion_of_after_update
  AFTER UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
CREATE TRIGGER trg_for_portion_of_before_delete
  BEFORE DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
CREATE TRIGGER trg_for_portion_of_after_delete
  AFTER DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger2();
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2021-01-01' TO '2022-01-01'
SET name = 'five^4'
WHERE id = '[5,6)';
NOTICE:  BEFORE UPDATE [Fri Jan 01 00:00:00 2021,Sat Jan 01 00:00:00 2022) of [Mon Jun 01 00:00:00 2020,Wed Jan 01 00:00:00 2025)
NOTICE:  BEFORE INSERT [Mon Jun 01 00:00:00 2020,Fri Jan 01 00:00:00 2021) of [<NULL>,<NULL>)
NOTICE:  BEFORE INSERT [Sat Jan 01 00:00:00 2022,Wed Jan 01 00:00:00 2025) of [<NULL>,<NULL>)
NOTICE:  AFTER INSERT [Mon Jun 01 00:00:00 2020,Fri Jan 01 00:00:00 2021) of [<NULL>,<NULL>)
NOTICE:  AFTER INSERT [Sat Jan 01 00:00:00 2022,Wed Jan 01 00:00:00 2025) of [<NULL>,<NULL>)
NOTICE:  AFTER UPDATE [Fri Jan 01 00:00:00 2021,Sat Jan 01 00:00:00 2022) of [Mon Jun 01 00:00:00 2020,Wed Jan 01 00:00:00 2025)
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2023-01-01' TO '2024-01-01'
WHERE id = '[5,6)';
NOTICE:  BEFORE DELETE [<NULL>,<NULL>) of [Sat Jan 01 00:00:00 2022,Wed Jan 01 00:00:00 2025)
NOTICE:  BEFORE INSERT [Sat Jan 01 00:00:00 2022,Sun Jan 01 00:00:00 2023) of [<NULL>,<NULL>)
NOTICE:  BEFORE INSERT [Mon Jan 01 00:00:00 2024,Wed Jan 01 00:00:00 2025) of [<NULL>,<NULL>)
NOTICE:  AFTER INSERT [Sat Jan 01 00:00:00 2022,Sun Jan 01 00:00:00 2023) of [<NULL>,<NULL>)
NOTICE:  AFTER INSERT [Mon Jan 01 00:00:00 2024,Wed Jan 01 00:00:00 2025) of [<NULL>,<NULL>)
NOTICE:  AFTER DELETE [<NULL>,<NULL>) of [Sat Jan 01 00:00:00 2022,Wed Jan 01 00:00:00 2025)
SELECT * FROM for_portion_of_test ORDER BY id, valid_from NULLS FIRST, valid_til;
  id   |        valid_from        |        valid_til         |  name   
-------+--------------------------+--------------------------+---------
 [1,2) | Thu Feb 08 00:00:00 2018 | Thu Feb 15 00:00:00 2018 | one^2
 [2,3) | Mon Jan 01 00:00:00 2018 | Fri Jan 05 00:00:00 2018 | two^2
 [3,4) | Mon Jan 01 00:00:00 2018 | Thu Feb 01 00:00:00 2018 | three^2
 [3,4) | Thu Feb 01 00:00:00 2018 | Thu Feb 15 00:00:00 2018 | three^3
 [3,4) | Thu Feb 15 00:00:00 2018 | Thu Mar 01 00:00:00 2018 | three^2
 [3,4) | Thu Mar 01 00:00:00 2018 | Sun Apr 01 00:00:00 2018 | three
 [4,5) |                          | Sun Jan 01 00:00:00 2017 | four^1
 [4,5) | Sun Jan 01 00:00:00 2017 | Thu Feb 01 00:00:00 2018 | four^3
 [4,5) | Thu Feb 01 00:00:00 2018 | Sun Apr 01 00:00:00 2018 | four^2
 [5,6) |                          | Sun Jan 01 00:00:00 2017 | five
 [5,6) | Sun Jan 01 00:00:00 2017 | Mon Jan 01 00:00:00 2018 | five^3
 [5,6) | Mon Jan 01 00:00:00 2018 | Fri Jun 01 00:00:00 2018 | five^3
 [5,6) | Mon Jun 01 00:00:00 2020 | Fri Jan 01 00:00:00 2021 | five
 [5,6) | Fri Jan 01 00:00:00 2021 | Sat Jan 01 00:00:00 2022 | five^4
 [5,6) | Sat Jan 01 00:00:00 2022 | Sun Jan 01 00:00:00 2023 | five
 [5,6) | Mon Jan 01 00:00:00 2024 | Wed Jan 01 00:00:00 2025 | five
(16 rows)

