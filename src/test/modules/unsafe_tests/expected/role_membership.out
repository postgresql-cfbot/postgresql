--
-- Tests for database-specific role memberships.
-- This is unsafe because roles and databases will added / removed / modified.
--
CREATE ROLE role_admin LOGIN SUPERUSER;
\connect postgres role_admin
CREATE FUNCTION check_memberships()
 RETURNS TABLE (role name, member name, grantor name, admin_option boolean, datname name)
 AS $$
SELECT
  r.rolname as role,
  m.rolname as member,
  g.rolname as grantor,
  admin_option,
  d.datname
FROM pg_auth_members a
JOIN pg_roles r ON r.oid = a.roleid
JOIN pg_roles m ON m.oid = a.member
LEFT JOIN pg_roles g ON g.oid = a.grantor
LEFT JOIN pg_database d ON d.oid = a.dbid
WHERE
  m.rolname LIKE 'role_%'
ORDER BY
  1, 2, 5
$$ LANGUAGE SQL;
-- Populate test databases
\connect template1
CREATE TABLE data AS SELECT generate_series(1, 3);
CREATE DATABASE db_1;
CREATE DATABASE db_2;
CREATE DATABASE db_3;
CREATE DATABASE db_4;
-- Read all cluster-wide with admin option
CREATE ROLE role_read_all_with_admin;
GRANT pg_read_all_data TO role_read_all_with_admin WITH ADMIN OPTION;
-- Read all in databases 1 and 2
CREATE ROLE role_read_12;
GRANT pg_read_all_data TO role_read_12 IN DATABASE db_1;
GRANT pg_read_all_data TO role_read_12 IN DATABASE db_2;
-- Read all in databases 3 and 4 with admin option
CREATE ROLE role_read_34;
GRANT pg_read_all_data TO role_read_34 IN DATABASE db_3 WITH ADMIN OPTION;
GRANT pg_read_all_data TO role_read_34 IN DATABASE db_4 WITH ADMIN OPTION;
-- Inherits read all in databases 3 and 4
CREATE ROLE role_inherited_34;
GRANT role_read_34 TO role_inherited_34;
-- Inherits read all in database 3
CREATE ROLE role_inherited_3;
GRANT role_read_34 TO role_inherited_3 IN DATABASE db_3;
-- No inherit
CREATE ROLE role_read_all_noinherit NOINHERIT;
GRANT role_read_all_with_admin TO role_read_all_noinherit;
-- No inherit in databases 1 and 2
CREATE ROLE role_read_12_noinherit NOINHERIT;
GRANT role_read_12 TO role_read_12_noinherit;
-- Alternate syntax
CREATE ROLE role_read_template1;
GRANT pg_read_all_data TO role_read_template1, role_read_all_noinherit IN CURRENT DATABASE;
-- Failure due to missing database
GRANT pg_read_all_data TO role_read_template1 IN DATABASE non_existent; -- error
ERROR:  database "non_existent" does not exist
-- Should warn on duplicate grants
GRANT pg_read_all_data TO role_read_all_with_admin; -- notice
NOTICE:  role "role_read_all_with_admin" is already a member of role "pg_read_all_data"
GRANT pg_read_all_data TO role_read_template1 IN DATABASE template1; -- notice
NOTICE:  role "role_read_template1" is already a member of role "pg_read_all_data" in database "template1"
-- Should not warn if adjusting admin option
GRANT pg_read_all_data TO role_read_template1 IN DATABASE template1 WITH ADMIN OPTION; -- silent
GRANT pg_read_all_data TO role_read_template1 IN DATABASE template1 WITH ADMIN OPTION; -- notice
NOTICE:  role "role_read_template1" is already a member of role "pg_read_all_data" in database "template1"
-- Check membership table
\connect postgres role_admin
SELECT * FROM check_memberships();
           role           |          member          |  grantor   | admin_option |  datname  
--------------------------+--------------------------+------------+--------------+-----------
 pg_read_all_data         | role_read_12             | role_admin | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin | t            | 
 pg_read_all_data         | role_read_template1      | role_admin | t            | template1
 role_read_12             | role_read_12_noinherit   | role_admin | f            | 
 role_read_34             | role_inherited_3         | role_admin | f            | db_3
 role_read_34             | role_inherited_34        | role_admin | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin | f            | 
(11 rows)

-- Test membership privileges (db_1)
\connect db_1
SET ROLE role_read_all_with_admin;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_12;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_34;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_inherited_34;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_inherited_3;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET SESSION AUTHORIZATION role_read_12;
SET ROLE pg_read_all_data; -- success
SET SESSION AUTHORIZATION role_inherited_34;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET ROLE role_read_34; -- success
SET SESSION AUTHORIZATION role_inherited_3;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET ROLE role_read_34; -- error
ERROR:  permission denied to set role "role_read_34"
SET SESSION AUTHORIZATION role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE pg_read_all_data; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET SESSION AUTHORIZATION role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

-- Test membership privileges (db_2)
\connect db_2
SET ROLE role_read_all_with_admin;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_12;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_34;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_inherited_34;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_inherited_3;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET SESSION AUTHORIZATION role_read_12;
SET ROLE pg_read_all_data; -- success
SET SESSION AUTHORIZATION role_inherited_34;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET ROLE role_read_34; -- success
SET SESSION AUTHORIZATION role_inherited_3;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET ROLE role_read_34; -- error
ERROR:  permission denied to set role "role_read_34"
SET SESSION AUTHORIZATION role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE pg_read_all_data; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET SESSION AUTHORIZATION role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

-- Test membership privileges (db_3)
\connect db_3
SET ROLE role_read_all_with_admin;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_12;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_34;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_inherited_34;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_inherited_3;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET SESSION AUTHORIZATION role_read_12;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET SESSION AUTHORIZATION role_inherited_34;
SET ROLE pg_read_all_data; -- success
SET ROLE role_read_34; -- success
SET SESSION AUTHORIZATION role_inherited_3;
SET ROLE pg_read_all_data; -- success
SET ROLE role_read_34; -- success
SET SESSION AUTHORIZATION role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE pg_read_all_data; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET SESSION AUTHORIZATION role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12; -- error
SELECT * FROM data; -- error
ERROR:  permission denied for table data
-- Test membership privileges (db_4)
\connect db_4
SET ROLE role_read_all_with_admin;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_read_12;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_34;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_inherited_34;
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET ROLE role_inherited_3;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET SESSION AUTHORIZATION role_read_12;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET SESSION AUTHORIZATION role_inherited_34;
SET ROLE pg_read_all_data; -- success
SET ROLE role_read_34; -- success
SET SESSION AUTHORIZATION role_inherited_3;
SET ROLE pg_read_all_data; -- error
ERROR:  permission denied to set role "pg_read_all_data"
SET ROLE role_read_34; -- error
ERROR:  permission denied to set role "role_read_34"
SET SESSION AUTHORIZATION role_read_all_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE pg_read_all_data; -- success
SELECT * FROM data; -- success
 generate_series 
-----------------
               1
               2
               3
(3 rows)

SET SESSION AUTHORIZATION role_read_12_noinherit;
SELECT * FROM data; -- error
ERROR:  permission denied for table data
SET ROLE role_read_12; -- error
SELECT * FROM data; -- error
ERROR:  permission denied for table data
\connect postgres role_admin
-- Should not warn if revoking admin option
REVOKE ADMIN OPTION FOR pg_read_all_data FROM role_read_template1 IN DATABASE template1; -- silent
REVOKE ADMIN OPTION FOR pg_read_all_data FROM role_read_template1 IN DATABASE template1; -- silent
SELECT * FROM check_memberships();
           role           |          member          |  grantor   | admin_option |  datname  
--------------------------+--------------------------+------------+--------------+-----------
 pg_read_all_data         | role_read_12             | role_admin | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin | t            | 
 pg_read_all_data         | role_read_template1      | role_admin | f            | template1
 role_read_12             | role_read_12_noinherit   | role_admin | f            | 
 role_read_34             | role_inherited_3         | role_admin | f            | db_3
 role_read_34             | role_inherited_34        | role_admin | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin | f            | 
(11 rows)

-- Should warn if revoking a non-existent membership
REVOKE pg_read_all_data FROM role_read_template1 IN DATABASE template1; -- success
REVOKE pg_read_all_data FROM role_read_template1 IN DATABASE template1; -- warning
WARNING:  role "role_read_template1" is not a member of role "pg_read_all_data" in database "template1"
SELECT * FROM check_memberships();
           role           |          member          |  grantor   | admin_option |  datname  
--------------------------+--------------------------+------------+--------------+-----------
 pg_read_all_data         | role_read_12             | role_admin | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin | f            | 
 role_read_34             | role_inherited_3         | role_admin | f            | db_3
 role_read_34             | role_inherited_34        | role_admin | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin | f            | 
(10 rows)

-- Revoke should only apply to the specified level
REVOKE pg_read_all_data FROM role_read_12; -- warning
WARNING:  role "role_read_12" is not a member of role "pg_read_all_data"
SELECT * FROM check_memberships();
           role           |          member          |  grantor   | admin_option |  datname  
--------------------------+--------------------------+------------+--------------+-----------
 pg_read_all_data         | role_read_12             | role_admin | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin | f            | 
 role_read_34             | role_inherited_3         | role_admin | f            | db_3
 role_read_34             | role_inherited_34        | role_admin | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin | f            | 
(10 rows)

-- Ensure cluster-wide admin option can grant cluster-wide and in specific databases
CREATE ROLE role_granted;
SET SESSION AUTHORIZATION role_read_all_with_admin;
GRANT pg_read_all_data TO role_granted; -- success
GRANT pg_read_all_data TO role_granted IN CURRENT DATABASE; -- success
GRANT pg_read_all_data TO role_granted IN DATABASE db_1; -- success
GRANT role_read_34 TO role_granted; -- error
ERROR:  must have admin option on role "role_read_34"
SELECT * FROM check_memberships();
           role           |          member          |         grantor          | admin_option |  datname  
--------------------------+--------------------------+--------------------------+--------------+-----------
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | db_1
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | postgres
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | 
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin               | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin               | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin               | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin               | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin               | f            | 
 role_read_34             | role_inherited_3         | role_admin               | f            | db_3
 role_read_34             | role_inherited_34        | role_admin               | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin               | f            | 
(13 rows)

-- Ensure database-specific admin option can only grant within that database
SET SESSION AUTHORIZATION role_read_34;
GRANT pg_read_all_data TO role_granted; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN CURRENT DATABASE; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN DATABASE db_3; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN DATABASE db_4; -- error
ERROR:  must have admin option on role "pg_read_all_data"
\connect db_3
SET SESSION AUTHORIZATION role_read_34;
GRANT pg_read_all_data TO role_granted; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN CURRENT DATABASE; -- success
GRANT pg_read_all_data TO role_granted IN DATABASE db_3; -- notice
NOTICE:  role "role_granted" is already a member of role "pg_read_all_data" in database "db_3"
GRANT pg_read_all_data TO role_granted IN DATABASE db_4; -- error
ERROR:  must have admin option on role "pg_read_all_data"
\connect db_4
SET SESSION AUTHORIZATION role_read_34;
GRANT pg_read_all_data TO role_granted; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN CURRENT DATABASE; -- success
GRANT pg_read_all_data TO role_granted IN DATABASE db_3; -- error
ERROR:  must have admin option on role "pg_read_all_data"
GRANT pg_read_all_data TO role_granted IN DATABASE db_4; -- notice
NOTICE:  role "role_granted" is already a member of role "pg_read_all_data" in database "db_4"
\connect postgres role_admin
SELECT * FROM check_memberships();
           role           |          member          |         grantor          | admin_option |  datname  
--------------------------+--------------------------+--------------------------+--------------+-----------
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | db_1
 pg_read_all_data         | role_granted             | role_read_34             | f            | db_3
 pg_read_all_data         | role_granted             | role_read_34             | f            | db_4
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | postgres
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | 
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin               | t            | db_3
 pg_read_all_data         | role_read_34             | role_admin               | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin               | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin               | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin               | f            | 
 role_read_34             | role_inherited_3         | role_admin               | f            | db_3
 role_read_34             | role_inherited_34        | role_admin               | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin               | f            | 
(15 rows)

-- Should clean up the membership table when dropping a database
\connect postgres role_admin
DROP DATABASE db_3;
SELECT * FROM check_memberships();
           role           |          member          |         grantor          | admin_option |  datname  
--------------------------+--------------------------+--------------------------+--------------+-----------
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | db_1
 pg_read_all_data         | role_granted             | role_read_34             | f            | db_4
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | postgres
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | 
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_2
 pg_read_all_data         | role_read_34             | role_admin               | t            | db_4
 pg_read_all_data         | role_read_all_noinherit  | role_admin               | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin               | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin               | f            | 
 role_read_34             | role_inherited_34        | role_admin               | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin               | f            | 
(12 rows)

-- Should clean up the membership table when dropping a role
DROP ROLE role_read_34;
SELECT * FROM check_memberships();
           role           |          member          |         grantor          | admin_option |  datname  
--------------------------+--------------------------+--------------------------+--------------+-----------
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | db_1
 pg_read_all_data         | role_granted             |                          | f            | db_4
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | postgres
 pg_read_all_data         | role_granted             | role_read_all_with_admin | f            | 
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_1
 pg_read_all_data         | role_read_12             | role_admin               | f            | db_2
 pg_read_all_data         | role_read_all_noinherit  | role_admin               | f            | template1
 pg_read_all_data         | role_read_all_with_admin | role_admin               | t            | 
 role_read_12             | role_read_12_noinherit   | role_admin               | f            | 
 role_read_all_with_admin | role_read_all_noinherit  | role_admin               | f            | 
(10 rows)

