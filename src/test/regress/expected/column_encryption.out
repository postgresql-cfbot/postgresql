\set HIDE_COLUMN_ENCRYPTION false
CREATE ROLE regress_enc_user1;
CREATE COLUMN MASTER KEY cmk1 WITH (
    realm = 'test'
);
COMMENT ON COLUMN MASTER KEY cmk1 IS 'column master key';
CREATE COLUMN MASTER KEY cmk1a WITH (
    realm = 'test'
);
CREATE COLUMN MASTER KEY cmk2;
CREATE COLUMN MASTER KEY cmk2a WITH (
    realm = 'testx'
);
ALTER COLUMN MASTER KEY cmk2a (realm = 'test2');
CREATE COLUMN ENCRYPTION KEY fail WITH VALUES (
    column_master_key = cmk1,
    algorithm = 'foo',  -- invalid
    encrypted_value = '\xDEADBEEF'
);
ERROR:  unrecognized encryption algorithm: foo
CREATE COLUMN ENCRYPTION KEY cek1 WITH VALUES (
    column_master_key = cmk1,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
COMMENT ON COLUMN ENCRYPTION KEY cek1 IS 'column encryption key';
ALTER COLUMN ENCRYPTION KEY cek1 ADD VALUE (
    column_master_key = cmk1a,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
-- duplicate
ALTER COLUMN ENCRYPTION KEY cek1 ADD VALUE (
    column_master_key = cmk1a,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
ERROR:  column encryption key "cek1" already has data for master key "cmk1a"
ALTER COLUMN ENCRYPTION KEY fail ADD VALUE (
    column_master_key = cmk1a,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
ERROR:  column encryption key "fail" does not exist
CREATE COLUMN ENCRYPTION KEY cek2 WITH VALUES (
    column_master_key = cmk2,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
),
(
    column_master_key = cmk2a,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
CREATE COLUMN ENCRYPTION KEY cek4 WITH VALUES (
    column_master_key = cmk1,
    algorithm = 'RSAES_OAEP_SHA_1',
    encrypted_value = '\xDEADBEEF'
);
CREATE TABLE tbl_fail (
    a int,
    b text,
    c text ENCRYPTED WITH (column_encryption_key = notexist)
);
ERROR:  column encryption key "notexist" does not exist
CREATE TABLE tbl_fail (
    a int,
    b text,
    c text ENCRYPTED WITH (column_encryption_key = cek1, algorithm = 'foo')
);
ERROR:  unrecognized encryption algorithm: foo
CREATE TABLE tbl_fail (
    a int,
    b text,
    c text ENCRYPTED WITH (column_encryption_key = cek1, encryption_type = wrong)
);
ERROR:  unrecognized encryption type: wrong
CREATE TABLE tbl_29f3 (
    a int,
    b text,
    c text ENCRYPTED WITH (column_encryption_key = cek1)
);
\d tbl_29f3
              Table "public.tbl_29f3"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | text    |           |          | 
 c      | text    |           |          | 

\d+ tbl_29f3
                                        Table "public.tbl_29f3"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | extended |            |              | 
 c      | text    |           |          |         | external | cek1       |              | 

CREATE TABLE tbl_447f (
    a int,
    b text
);
ALTER TABLE tbl_447f ADD COLUMN c text ENCRYPTED WITH (column_encryption_key = cek1);
\d tbl_447f
              Table "public.tbl_447f"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | text    |           |          | 
 c      | text    |           |          | 

\d+ tbl_447f
                                        Table "public.tbl_447f"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | extended |            |              | 
 c      | text    |           |          |         | external | cek1       |              | 

CREATE TABLE tbl_4897 (LIKE tbl_447f);
CREATE TABLE tbl_6978 (LIKE tbl_447f INCLUDING ENCRYPTED);
\d+ tbl_4897
                                        Table "public.tbl_4897"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | extended |            |              | 
 c      | text    |           |          |         | extended |            |              | 

\d+ tbl_6978
                                        Table "public.tbl_6978"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | extended |            |              | 
 c      | text    |           |          |         | external | cek1       |              | 

CREATE VIEW view_3bc9 AS SELECT * FROM tbl_29f3;
\d+ view_3bc9
                                 View "public.view_3bc9"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Description 
--------+---------+-----------+----------+---------+----------+------------+-------------
 a      | integer |           |          |         | plain    |            | 
 b      | text    |           |          |         | extended |            | 
 c      | text    |           |          |         | external | cek1       | 
View definition:
 SELECT a,
    b,
    c
   FROM tbl_29f3;

CREATE TABLE tbl_2386 AS SELECT * FROM tbl_29f3 WITH NO DATA;
\d+ tbl_2386
                                        Table "public.tbl_2386"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | extended |            |              | 
 c      | text    |           |          |         | external | cek1       |              | 

CREATE TABLE tbl_2941 AS SELECT * FROM tbl_29f3 WITH DATA;
ERROR:  encrypted columns not yet implemented for this command
\d+ tbl_2941
-- test partition declarations
CREATE TABLE tbl_13fa (
    a int,
    b text ENCRYPTED WITH (column_encryption_key = cek1)
) PARTITION BY RANGE (a);
CREATE TABLE tbl_13fa_1 PARTITION OF tbl_13fa FOR VALUES FROM (1) TO (100);
\d+ tbl_13fa
                                  Partitioned table "public.tbl_13fa"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | external | cek1       |              | 
Partition key: RANGE (a)
Partitions: tbl_13fa_1 FOR VALUES FROM (1) TO (100)

\d+ tbl_13fa_1
                                       Table "public.tbl_13fa_1"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | external | cek1       |              | 
Partition of: tbl_13fa FOR VALUES FROM (1) TO (100)
Partition constraint: ((a IS NOT NULL) AND (a >= 1) AND (a < 100))

-- test inheritance
CREATE TABLE tbl_36f3_a (
    a int,
    b text ENCRYPTED WITH (column_encryption_key = cek1)
);
CREATE TABLE tbl_36f3_b (
    a int,
    b text ENCRYPTED WITH (column_encryption_key = cek1)
);
CREATE TABLE tbl_36f3_c (
    a int,
    b text ENCRYPTED WITH (column_encryption_key = cek2)
);
CREATE TABLE tbl_36f3_d (
    a int,
    b text ENCRYPTED WITH (column_encryption_key = cek1, encryption_type = deterministic)
);
CREATE TABLE tbl_36f3_e (
    a int,
    b text
);
-- not implemented (but could be ok)
CREATE TABLE tbl_36f3_ab (c int) INHERITS (tbl_36f3_a, tbl_36f3_b);
NOTICE:  merging multiple inherited definitions of column "a"
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  multiple inheritance of encrypted columns is not implemented
\d+ tbl_36f3_ab
-- not implemented (but should fail)
CREATE TABLE tbl_36f3_ac (c int) INHERITS (tbl_36f3_a, tbl_36f3_c);
NOTICE:  merging multiple inherited definitions of column "a"
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  multiple inheritance of encrypted columns is not implemented
CREATE TABLE tbl_36f3_ad (c int) INHERITS (tbl_36f3_a, tbl_36f3_d);
NOTICE:  merging multiple inherited definitions of column "a"
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  multiple inheritance of encrypted columns is not implemented
-- fail
CREATE TABLE tbl_36f3_ae (c int) INHERITS (tbl_36f3_a, tbl_36f3_e);
NOTICE:  merging multiple inherited definitions of column "a"
NOTICE:  merging multiple inherited definitions of column "b"
ERROR:  column "b" has an encryption specification conflict
-- ok
CREATE TABLE tbl_36f3_a_1 (b text ENCRYPTED WITH (column_encryption_key = cek1), c int) INHERITS (tbl_36f3_a);
NOTICE:  moving and merging column "b" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
\d+ tbl_36f3_a_1
                                      Table "public.tbl_36f3_a_1"
 Column |  Type   | Collation | Nullable | Default | Storage  | Encryption | Stats target | Description 
--------+---------+-----------+----------+---------+----------+------------+--------------+-------------
 a      | integer |           |          |         | plain    |            |              | 
 b      | text    |           |          |         | external | cek1       |              | 
 c      | integer |           |          |         | plain    |            |              | 
Inherits: tbl_36f3_a

-- fail
CREATE TABLE tbl_36f3_a_2 (b text ENCRYPTED WITH (column_encryption_key = cek2), c int) INHERITS (tbl_36f3_a);
NOTICE:  moving and merging column "b" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
ERROR:  column "b" has an encryption specification conflict
CREATE TABLE tbl_36f3_a_2 (b text ENCRYPTED WITH (column_encryption_key = cek1, encryption_type = deterministic), c int) INHERITS (tbl_36f3_a);
NOTICE:  moving and merging column "b" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
ERROR:  column "b" has an encryption specification conflict
CREATE TABLE tbl_36f3_a_2 (b text, c int) INHERITS (tbl_36f3_a);
NOTICE:  moving and merging column "b" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
ERROR:  column "b" has an encryption specification conflict
DROP TABLE tbl_36f3_b, tbl_36f3_c, tbl_36f3_d, tbl_36f3_e;
-- SET SCHEMA
CREATE SCHEMA test_schema_ce;
ALTER COLUMN ENCRYPTION KEY cek1 SET SCHEMA test_schema_ce;
ALTER COLUMN MASTER KEY cmk1 SET SCHEMA test_schema_ce;
ALTER COLUMN ENCRYPTION KEY test_schema_ce.cek1 SET SCHEMA public;
ALTER COLUMN MASTER KEY test_schema_ce.cmk1 SET SCHEMA public;
DROP SCHEMA test_schema_ce;
DROP COLUMN MASTER KEY cmk1 RESTRICT;  -- fail
ERROR:  cannot drop column master key cmk1 because other objects depend on it
DETAIL:  column encryption key data of column encryption key cek1 for column master key cmk1 depends on column master key cmk1
column encryption key data of column encryption key cek4 for column master key cmk1 depends on column master key cmk1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
ALTER COLUMN MASTER KEY cmk2 RENAME TO cmk3;
ALTER COLUMN MASTER KEY cmk1 RENAME TO cmk3;  -- fail
ERROR:  column master key "cmk3" already exists in schema "public"
ALTER COLUMN MASTER KEY cmkx RENAME TO cmky;  -- fail
ERROR:  column master key "cmkx" does not exist
ALTER COLUMN ENCRYPTION KEY cek2 RENAME TO cek3;
ALTER COLUMN ENCRYPTION KEY cek1 RENAME TO cek3;  -- fail
ERROR:  column encryption key "cek3" already exists in schema "public"
ALTER COLUMN ENCRYPTION KEY cekx RENAME TO ceky;  -- fail
ERROR:  column encryption key "cekx" does not exist
SET SESSION AUTHORIZATION 'regress_enc_user1';
DROP COLUMN ENCRYPTION KEY cek3;  -- fail
ERROR:  must be owner of column encryption key cek3
DROP COLUMN MASTER KEY cmk3;  -- fail
ERROR:  must be owner of column master key cmk3
RESET SESSION AUTHORIZATION;
ALTER COLUMN MASTER KEY cmk3 OWNER TO regress_enc_user1;
ALTER COLUMN ENCRYPTION KEY cek3 OWNER TO regress_enc_user1;
\dcek cek3
         List of column encryption keys
 Schema | Name |       Owner       | Master key 
--------+------+-------------------+------------
 public | cek3 | regress_enc_user1 | cmk2a
 public | cek3 | regress_enc_user1 | cmk3
(2 rows)

\dcmk cmk3
        List of column master keys
 Schema | Name |       Owner       | Realm 
--------+------+-------------------+-------
 public | cmk3 | regress_enc_user1 | 
(1 row)

SET SESSION AUTHORIZATION 'regress_enc_user1';
DROP COLUMN ENCRYPTION KEY cek3;  -- ok now
DROP COLUMN MASTER KEY cmk3;  -- ok now
RESET SESSION AUTHORIZATION;
ALTER COLUMN ENCRYPTION KEY cek1 DROP VALUE (column_master_key = cmk1a);
ALTER COLUMN ENCRYPTION KEY cek1 DROP VALUE (column_master_key = cmk1a);  -- fail
ERROR:  column encryption key "cek1" has no data for master key "cmk1a"
ALTER COLUMN ENCRYPTION KEY cek1 DROP VALUE (column_master_key = fail);  -- fail
ERROR:  column master key "fail" does not exist
ALTER COLUMN ENCRYPTION KEY cek1 DROP VALUE (column_master_key = cmk1a, algorithm = 'foo');  -- fail
ERROR:  attribute "algorithm" must not be specified
DROP COLUMN ENCRYPTION KEY cek4;
DROP COLUMN ENCRYPTION KEY fail;
ERROR:  column encryption key "fail" does not exist
DROP COLUMN ENCRYPTION KEY IF EXISTS nonexistent;
NOTICE:  column encryption key "nonexistent" does not exist, skipping
DROP COLUMN MASTER KEY cmk1a;
DROP COLUMN MASTER KEY fail;
ERROR:  column master key "fail" does not exist
DROP COLUMN MASTER KEY IF EXISTS nonexistent;
NOTICE:  column master key "nonexistent" does not exist, skipping
DROP ROLE regress_enc_user1;
