Parsed test spec with 4 sessions

starting permutation: s3_start_reindex s1_start_upsert s4_wakeup_to_swap s2_start_upsert s4_wakeup_s1 s4_wakeup_s2 s4_wakeup_to_set_dead
injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

step s3_start_reindex: REINDEX INDEX CONCURRENTLY test.tbl_partition_pkey; <waiting ...>
step s1_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s4_wakeup_to_swap: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_swap');
	SELECT injection_points_detach('reindex_relation_concurrently_before_swap');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s2_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s4_wakeup_s1: 
	SELECT injection_points_wakeup('check_exclusion_or_unique_constraint_no_conflict');
	SELECT injection_points_detach('check_exclusion_or_unique_constraint_no_conflict');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s1_start_upsert: <... completed>
step s4_wakeup_s2: 
	SELECT injection_points_wakeup('exec_insert_before_insert_speculative');
	SELECT injection_points_detach('exec_insert_before_insert_speculative');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s2_start_upsert: <... completed>
step s4_wakeup_to_set_dead: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_set_dead');
	SELECT injection_points_detach('reindex_relation_concurrently_before_set_dead');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s3_start_reindex: <... completed>

starting permutation: s3_start_reindex s2_start_upsert s4_wakeup_to_swap s1_start_upsert s4_wakeup_s1 s4_wakeup_s2 s4_wakeup_to_set_dead
injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

step s3_start_reindex: REINDEX INDEX CONCURRENTLY test.tbl_partition_pkey; <waiting ...>
step s2_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s4_wakeup_to_swap: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_swap');
	SELECT injection_points_detach('reindex_relation_concurrently_before_swap');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s1_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s4_wakeup_s1: 
	SELECT injection_points_wakeup('check_exclusion_or_unique_constraint_no_conflict');
	SELECT injection_points_detach('check_exclusion_or_unique_constraint_no_conflict');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s1_start_upsert: <... completed>
step s4_wakeup_s2: 
	SELECT injection_points_wakeup('exec_insert_before_insert_speculative');
	SELECT injection_points_detach('exec_insert_before_insert_speculative');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s2_start_upsert: <... completed>
step s4_wakeup_to_set_dead: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_set_dead');
	SELECT injection_points_detach('reindex_relation_concurrently_before_set_dead');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s3_start_reindex: <... completed>

starting permutation: s3_start_reindex s4_wakeup_to_swap s1_start_upsert s2_start_upsert s4_wakeup_s1 s4_wakeup_to_set_dead s4_wakeup_s2
injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

injection_points_attach
-----------------------
                       
(1 row)

step s3_start_reindex: REINDEX INDEX CONCURRENTLY test.tbl_partition_pkey; <waiting ...>
step s4_wakeup_to_swap: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_swap');
	SELECT injection_points_detach('reindex_relation_concurrently_before_swap');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s1_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s2_start_upsert: INSERT INTO test.tbl VALUES(13,now()) on conflict(i) do update set updated_at = now(); <waiting ...>
step s4_wakeup_s1: 
	SELECT injection_points_wakeup('check_exclusion_or_unique_constraint_no_conflict');
	SELECT injection_points_detach('check_exclusion_or_unique_constraint_no_conflict');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s1_start_upsert: <... completed>
step s4_wakeup_to_set_dead: 
	SELECT injection_points_wakeup('reindex_relation_concurrently_before_set_dead');
	SELECT injection_points_detach('reindex_relation_concurrently_before_set_dead');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s4_wakeup_s2: 
	SELECT injection_points_wakeup('exec_insert_before_insert_speculative');
	SELECT injection_points_detach('exec_insert_before_insert_speculative');

injection_points_wakeup
-----------------------
                       
(1 row)

injection_points_detach
-----------------------
                       
(1 row)

step s3_start_reindex: <... completed>
step s2_start_upsert: <... completed>
