--
-- BTREE_INDEX
--
-- directory paths are passed to us in environment variables
\getenv abs_srcdir PG_ABS_SRCDIR
CREATE TABLE bt_i4_heap (
	seqno 		int4,
	random 		int4
);
CREATE TABLE bt_name_heap (
	seqno 		name,
	random 		int4
);
CREATE TABLE bt_txt_heap (
	seqno 		text,
	random 		int4
);
CREATE TABLE bt_f8_heap (
	seqno 		float8,
	random 		int4
);
\set filename :abs_srcdir '/data/desc.data'
COPY bt_i4_heap FROM :'filename';
\set filename :abs_srcdir '/data/hash.data'
COPY bt_name_heap FROM :'filename';
\set filename :abs_srcdir '/data/desc.data'
COPY bt_txt_heap FROM :'filename';
\set filename :abs_srcdir '/data/hash.data'
COPY bt_f8_heap FROM :'filename';
ANALYZE bt_i4_heap;
ANALYZE bt_name_heap;
ANALYZE bt_txt_heap;
ANALYZE bt_f8_heap;
--
-- BTREE ascending/descending cases
--
-- we load int4/text from pure descending data (each key is a new
-- low key) and name/f8 from pure ascending data (each key is a new
-- high key).  we had a bug where new low keys would sometimes be
-- "lost".
--
CREATE INDEX bt_i4_index ON bt_i4_heap USING btree (seqno int4_ops);
CREATE INDEX bt_name_index ON bt_name_heap USING btree (seqno name_ops);
CREATE INDEX bt_txt_index ON bt_txt_heap USING btree (seqno text_ops);
CREATE INDEX bt_f8_index ON bt_f8_heap USING btree (seqno float8_ops);
--
-- test retrieval of min/max keys for each index
--
SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno < 1;
 seqno |   random   
-------+------------
     0 | 1935401906
(1 row)

SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno >= 9999;
 seqno |   random   
-------+------------
  9999 | 1227676208
(1 row)

SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno = 4500;
 seqno |   random   
-------+------------
  4500 | 2080851358
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno < '1'::name;
 seqno |   random   
-------+------------
 0     | 1935401906
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno >= '9999'::name;
 seqno |   random   
-------+------------
 9999  | 1227676208
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno = '4500'::name;
 seqno |   random   
-------+------------
 4500  | 2080851358
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno < '1'::text;
 seqno |   random   
-------+------------
 0     | 1935401906
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno >= '9999'::text;
 seqno |   random   
-------+------------
 9999  | 1227676208
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno = '4500'::text;
 seqno |   random   
-------+------------
 4500  | 2080851358
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno < '1'::float8;
 seqno |   random   
-------+------------
     0 | 1935401906
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno >= '9999'::float8;
 seqno |   random   
-------+------------
  9999 | 1227676208
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno = '4500'::float8;
 seqno |   random   
-------+------------
  4500 | 2080851358
(1 row)

--
-- Add coverage for optimization of backwards scan index descents
--
-- Here we expect _bt_search to descend straight to a leaf page containing a
-- non-pivot tuple with the value '47', which comes last (after 11 similar
-- non-pivot tuples).  Query execution should only need to visit a single
-- leaf page here.
--
-- Test case relies on tenk1_hundred index having a leaf page whose high key
-- is '(48, -inf)'.  We use a low cardinality index to make our test case less
-- sensitive to implementation details that may change in the future.
set enable_seqscan to false;
set enable_indexscan to true;
set enable_bitmapscan to false;
explain (costs off)
select hundred, twenty from tenk1 where hundred < 48 order by hundred desc limit 1;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   ->  Index Scan Backward using tenk1_hundred on tenk1
         Index Cond: (hundred < 48)
(3 rows)

select hundred, twenty from tenk1 where hundred < 48 order by hundred desc limit 1;
 hundred | twenty 
---------+--------
      47 |      7
(1 row)

-- This variant of the query need only return a single tuple located to the immediate
-- right of the '(48, -inf)' high key.  It also only needs to scan one single
-- leaf page (the right sibling of the page scanned by the last test case):
explain (costs off)
select hundred, twenty from tenk1 where hundred <= 48 order by hundred desc limit 1;
                       QUERY PLAN                       
--------------------------------------------------------
 Limit
   ->  Index Scan Backward using tenk1_hundred on tenk1
         Index Cond: (hundred <= 48)
(3 rows)

select hundred, twenty from tenk1 where hundred <= 48 order by hundred desc limit 1;
 hundred | twenty 
---------+--------
      48 |      8
(1 row)

--
-- Check correct optimization of LIKE (special index operator support)
-- for both indexscan and bitmapscan cases
--
set enable_seqscan to false;
set enable_indexscan to true;
set enable_bitmapscan to false;
explain (costs off)
select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
   Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))
   Filter: (proname ~~ 'RI\_FKey%del'::text)
(3 rows)

select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
        proname         
------------------------
 RI_FKey_cascade_del
 RI_FKey_noaction_del
 RI_FKey_restrict_del
 RI_FKey_setdefault_del
 RI_FKey_setnull_del
(5 rows)

explain (costs off)
select proname from pg_proc where proname ilike '00%foo' order by 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
   Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))
   Filter: (proname ~~* '00%foo'::text)
(3 rows)

select proname from pg_proc where proname ilike '00%foo' order by 1;
 proname 
---------
(0 rows)

explain (costs off)
select proname from pg_proc where proname ilike 'ri%foo' order by 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
   Filter: (proname ~~* 'ri%foo'::text)
(2 rows)

set enable_indexscan to false;
set enable_bitmapscan to true;
explain (costs off)
select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort
   Sort Key: proname
   ->  Bitmap Heap Scan on pg_proc
         Filter: (proname ~~ 'RI\_FKey%del'::text)
         ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index
               Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))
(6 rows)

select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
        proname         
------------------------
 RI_FKey_cascade_del
 RI_FKey_noaction_del
 RI_FKey_restrict_del
 RI_FKey_setdefault_del
 RI_FKey_setnull_del
(5 rows)

explain (costs off)
select proname from pg_proc where proname ilike '00%foo' order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Sort Key: proname
   ->  Bitmap Heap Scan on pg_proc
         Filter: (proname ~~* '00%foo'::text)
         ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index
               Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))
(6 rows)

select proname from pg_proc where proname ilike '00%foo' order by 1;
 proname 
---------
(0 rows)

explain (costs off)
select proname from pg_proc where proname ilike 'ri%foo' order by 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
   Filter: (proname ~~* 'ri%foo'::text)
(2 rows)

reset enable_seqscan;
reset enable_indexscan;
reset enable_bitmapscan;
-- Also check LIKE optimization with binary-compatible cases
create temp table btree_bpchar (f1 text collate "C");
create index on btree_bpchar(f1 bpchar_ops) WITH (deduplicate_items=on);
insert into btree_bpchar values ('foo'), ('fool'), ('bar'), ('quux');
-- doesn't match index:
explain (costs off)
select * from btree_bpchar where f1 like 'foo';
          QUERY PLAN           
-------------------------------
 Seq Scan on btree_bpchar
   Filter: (f1 ~~ 'foo'::text)
(2 rows)

select * from btree_bpchar where f1 like 'foo';
 f1  
-----
 foo
(1 row)

explain (costs off)
select * from btree_bpchar where f1 like 'foo%';
           QUERY PLAN           
--------------------------------
 Seq Scan on btree_bpchar
   Filter: (f1 ~~ 'foo%'::text)
(2 rows)

select * from btree_bpchar where f1 like 'foo%';
  f1  
------
 foo
 fool
(2 rows)

-- these do match the index:
explain (costs off)
select * from btree_bpchar where f1::bpchar like 'foo';
                     QUERY PLAN                     
----------------------------------------------------
 Bitmap Heap Scan on btree_bpchar
   Filter: ((f1)::bpchar ~~ 'foo'::text)
   ->  Bitmap Index Scan on btree_bpchar_f1_idx
         Index Cond: ((f1)::bpchar = 'foo'::bpchar)
(4 rows)

select * from btree_bpchar where f1::bpchar like 'foo';
 f1  
-----
 foo
(1 row)

explain (costs off)
select * from btree_bpchar where f1::bpchar like 'foo%';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Bitmap Heap Scan on btree_bpchar
   Filter: ((f1)::bpchar ~~ 'foo%'::text)
   ->  Bitmap Index Scan on btree_bpchar_f1_idx
         Index Cond: (((f1)::bpchar >= 'foo'::bpchar) AND ((f1)::bpchar < 'fop'::bpchar))
(4 rows)

select * from btree_bpchar where f1::bpchar like 'foo%';
  f1  
------
 foo
 fool
(2 rows)

-- get test coverage for "single value" deduplication strategy:
insert into btree_bpchar select 'foo' from generate_series(1,1500);
--
-- Perform unique checking, with and without the use of deduplication
--
CREATE TABLE dedup_unique_test_table (a int) WITH (autovacuum_enabled=false);
CREATE UNIQUE INDEX dedup_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=on);
CREATE UNIQUE INDEX plain_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=off);
-- Generate enough garbage tuples in index to ensure that even the unique index
-- with deduplication enabled has to check multiple leaf pages during unique
-- checking (at least with a BLCKSZ of 8192 or less)
DO $$
BEGIN
    FOR r IN 1..1350 LOOP
        DELETE FROM dedup_unique_test_table;
        INSERT INTO dedup_unique_test_table SELECT 1;
    END LOOP;
END$$;
-- Exercise the LP_DEAD-bit-set tuple deletion code with a posting list tuple.
-- The implementation prefers deleting existing items to merging any duplicate
-- tuples into a posting list, so we need an explicit test to make sure we get
-- coverage (note that this test also assumes BLCKSZ is 8192 or less):
DROP INDEX plain_unique;
DELETE FROM dedup_unique_test_table WHERE a = 1;
INSERT INTO dedup_unique_test_table SELECT i FROM generate_series(0,450) i;
--
-- Test B-tree fast path (cache rightmost leaf page) optimization.
--
-- First create a tree that's at least three levels deep (i.e. has one level
-- between the root and leaf levels). The text inserted is long.  It won't be
-- TOAST compressed because we use plain storage in the table.  Only a few
-- index tuples fit on each internal page, allowing us to get a tall tree with
-- few pages.  (A tall tree is required to trigger caching.)
--
-- The text column must be the leading column in the index, since suffix
-- truncation would otherwise truncate tuples on internal pages, leaving us
-- with a short tree.
create table btree_tall_tbl(id int4, t text);
alter table btree_tall_tbl alter COLUMN t set storage plain;
create index btree_tall_idx on btree_tall_tbl (t, id) with (fillfactor = 10);
insert into btree_tall_tbl select g, repeat('x', 250)
from generate_series(1, 130) g;
--
-- Test for multilevel page deletion
--
CREATE TABLE delete_test_table (a bigint, b bigint, c bigint, d bigint);
INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,80000) i;
ALTER TABLE delete_test_table ADD PRIMARY KEY (a,b,c,d);
-- Delete most entries, and vacuum, deleting internal pages and creating "fast
-- root"
DELETE FROM delete_test_table WHERE a < 79990;
VACUUM delete_test_table;
--
-- Test B-tree insertion with a metapage update (XLOG_BTREE_INSERT_META
-- WAL record type). This happens when a "fast root" page is split.  This
-- also creates coverage for nbtree FSM page recycling.
--
-- The vacuum above should've turned the leaf page into a fast root. We just
-- need to insert some rows to cause the fast root page to split.
INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,1000) i;
-- Test unsupported btree opclass parameters
create index on btree_tall_tbl (id int4_ops(foo=1));
ERROR:  operator class int4_ops has no options
-- Test case of ALTER INDEX with abuse of column names for indexes.
-- This grammar is not officially supported, but the parser allows it.
CREATE INDEX btree_tall_idx2 ON btree_tall_tbl (id);
ALTER INDEX btree_tall_idx2 ALTER COLUMN id SET (n_distinct=100);
ERROR:  ALTER action ALTER COLUMN ... SET cannot be performed on relation "btree_tall_idx2"
DETAIL:  This operation is not supported for indexes.
DROP INDEX btree_tall_idx2;
-- Partitioned index
CREATE TABLE btree_part (id int4) PARTITION BY RANGE (id);
CREATE INDEX btree_part_idx ON btree_part(id);
ALTER INDEX btree_part_idx ALTER COLUMN id SET (n_distinct=100);
ERROR:  ALTER action ALTER COLUMN ... SET cannot be performed on relation "btree_part_idx"
DETAIL:  This operation is not supported for partitioned indexes.
DROP TABLE btree_part;
-- Add tests to give coverage of various subtle issues.
--
-- XXX This may not be suitable for commit, due to taking up too many cycles.
--
-- Here we don't remember the scan's array keys before processing a page, only
-- after processing a page (which is implicit, it's just the scan's current
-- keys).  So when we move the scan backwards we think that the top-level scan
-- should terminate, when in reality it should jump backwards to the leaf page
-- that we last visited.
create temp table backup_wrong_tbl (district int4, warehouse int4, orderid int4, orderline int4);
create index backup_wrong_idx on backup_wrong_tbl (district, warehouse, orderid, orderline);
insert into backup_wrong_tbl
select district, warehouse, orderid, orderline
from
  generate_series(1, 3) district,
  generate_series(1, 2) warehouse,
  generate_series(1, 51) orderid,
  generate_series(1, 10) orderline;
begin;
declare back_up_terminate_toplevel_wrong cursor for
select * from backup_wrong_tbl
where district in (1, 3) and warehouse in (1,2)
and orderid in (48, 50)
order by district, warehouse, orderid, orderline;
fetch forward 60 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         1 |      48 |         1
        1 |         1 |      48 |         2
        1 |         1 |      48 |         3
        1 |         1 |      48 |         4
        1 |         1 |      48 |         5
        1 |         1 |      48 |         6
        1 |         1 |      48 |         7
        1 |         1 |      48 |         8
        1 |         1 |      48 |         9
        1 |         1 |      48 |        10
        1 |         1 |      50 |         1
        1 |         1 |      50 |         2
        1 |         1 |      50 |         3
        1 |         1 |      50 |         4
        1 |         1 |      50 |         5
        1 |         1 |      50 |         6
        1 |         1 |      50 |         7
        1 |         1 |      50 |         8
        1 |         1 |      50 |         9
        1 |         1 |      50 |        10
        1 |         2 |      48 |         1
        1 |         2 |      48 |         2
        1 |         2 |      48 |         3
        1 |         2 |      48 |         4
        1 |         2 |      48 |         5
        1 |         2 |      48 |         6
        1 |         2 |      48 |         7
        1 |         2 |      48 |         8
        1 |         2 |      48 |         9
        1 |         2 |      48 |        10
        1 |         2 |      50 |         1
        1 |         2 |      50 |         2
        1 |         2 |      50 |         3
        1 |         2 |      50 |         4
        1 |         2 |      50 |         5
        1 |         2 |      50 |         6
        1 |         2 |      50 |         7
        1 |         2 |      50 |         8
        1 |         2 |      50 |         9
        1 |         2 |      50 |        10
        3 |         1 |      48 |         1
        3 |         1 |      48 |         2
        3 |         1 |      48 |         3
        3 |         1 |      48 |         4
        3 |         1 |      48 |         5
        3 |         1 |      48 |         6
        3 |         1 |      48 |         7
        3 |         1 |      48 |         8
        3 |         1 |      48 |         9
        3 |         1 |      48 |        10
        3 |         1 |      50 |         1
        3 |         1 |      50 |         2
        3 |         1 |      50 |         3
        3 |         1 |      50 |         4
        3 |         1 |      50 |         5
        3 |         1 |      50 |         6
        3 |         1 |      50 |         7
        3 |         1 |      50 |         8
        3 |         1 |      50 |         9
        3 |         1 |      50 |        10
(60 rows)

fetch backward 29 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |      50 |         9
        3 |         1 |      50 |         8
        3 |         1 |      50 |         7
        3 |         1 |      50 |         6
        3 |         1 |      50 |         5
        3 |         1 |      50 |         4
        3 |         1 |      50 |         3
        3 |         1 |      50 |         2
        3 |         1 |      50 |         1
        3 |         1 |      48 |        10
        3 |         1 |      48 |         9
        3 |         1 |      48 |         8
        3 |         1 |      48 |         7
        3 |         1 |      48 |         6
        3 |         1 |      48 |         5
        3 |         1 |      48 |         4
        3 |         1 |      48 |         3
        3 |         1 |      48 |         2
        3 |         1 |      48 |         1
        1 |         2 |      50 |        10
        1 |         2 |      50 |         9
        1 |         2 |      50 |         8
        1 |         2 |      50 |         7
        1 |         2 |      50 |         6
        1 |         2 |      50 |         5
        1 |         2 |      50 |         4
        1 |         2 |      50 |         3
        1 |         2 |      50 |         2
        1 |         2 |      50 |         1
(29 rows)

fetch forward 12 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         2 |      50 |         2
        1 |         2 |      50 |         3
        1 |         2 |      50 |         4
        1 |         2 |      50 |         5
        1 |         2 |      50 |         6
        1 |         2 |      50 |         7
        1 |         2 |      50 |         8
        1 |         2 |      50 |         9
        1 |         2 |      50 |        10
        3 |         1 |      48 |         1
        3 |         1 |      48 |         2
        3 |         1 |      48 |         3
(12 rows)

fetch backward 30 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |      48 |         2
        3 |         1 |      48 |         1
        1 |         2 |      50 |        10
        1 |         2 |      50 |         9
        1 |         2 |      50 |         8
        1 |         2 |      50 |         7
        1 |         2 |      50 |         6
        1 |         2 |      50 |         5
        1 |         2 |      50 |         4
        1 |         2 |      50 |         3
        1 |         2 |      50 |         2
        1 |         2 |      50 |         1
        1 |         2 |      48 |        10
        1 |         2 |      48 |         9
        1 |         2 |      48 |         8
        1 |         2 |      48 |         7
        1 |         2 |      48 |         6
        1 |         2 |      48 |         5
        1 |         2 |      48 |         4
        1 |         2 |      48 |         3
        1 |         2 |      48 |         2
        1 |         2 |      48 |         1
        1 |         1 |      50 |        10
        1 |         1 |      50 |         9
        1 |         1 |      50 |         8
        1 |         1 |      50 |         7
        1 |         1 |      50 |         6
        1 |         1 |      50 |         5
        1 |         1 |      50 |         4
        1 |         1 |      50 |         3
(30 rows)

fetch forward  31 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         1 |      50 |         4
        1 |         1 |      50 |         5
        1 |         1 |      50 |         6
        1 |         1 |      50 |         7
        1 |         1 |      50 |         8
        1 |         1 |      50 |         9
        1 |         1 |      50 |        10
        1 |         2 |      48 |         1
        1 |         2 |      48 |         2
        1 |         2 |      48 |         3
        1 |         2 |      48 |         4
        1 |         2 |      48 |         5
        1 |         2 |      48 |         6
        1 |         2 |      48 |         7
        1 |         2 |      48 |         8
        1 |         2 |      48 |         9
        1 |         2 |      48 |        10
        1 |         2 |      50 |         1
        1 |         2 |      50 |         2
        1 |         2 |      50 |         3
        1 |         2 |      50 |         4
        1 |         2 |      50 |         5
        1 |         2 |      50 |         6
        1 |         2 |      50 |         7
        1 |         2 |      50 |         8
        1 |         2 |      50 |         9
        1 |         2 |      50 |        10
        3 |         1 |      48 |         1
        3 |         1 |      48 |         2
        3 |         1 |      48 |         3
        3 |         1 |      48 |         4
(31 rows)

fetch backward 32 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |      48 |         3
        3 |         1 |      48 |         2
        3 |         1 |      48 |         1
        1 |         2 |      50 |        10
        1 |         2 |      50 |         9
        1 |         2 |      50 |         8
        1 |         2 |      50 |         7
        1 |         2 |      50 |         6
        1 |         2 |      50 |         5
        1 |         2 |      50 |         4
        1 |         2 |      50 |         3
        1 |         2 |      50 |         2
        1 |         2 |      50 |         1
        1 |         2 |      48 |        10
        1 |         2 |      48 |         9
        1 |         2 |      48 |         8
        1 |         2 |      48 |         7
        1 |         2 |      48 |         6
        1 |         2 |      48 |         5
        1 |         2 |      48 |         4
        1 |         2 |      48 |         3
        1 |         2 |      48 |         2
        1 |         2 |      48 |         1
        1 |         1 |      50 |        10
        1 |         1 |      50 |         9
        1 |         1 |      50 |         8
        1 |         1 |      50 |         7
        1 |         1 |      50 |         6
        1 |         1 |      50 |         5
        1 |         1 |      50 |         4
        1 |         1 |      50 |         3
        1 |         1 |      50 |         2
(32 rows)

fetch forward  33 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         1 |      50 |         3
        1 |         1 |      50 |         4
        1 |         1 |      50 |         5
        1 |         1 |      50 |         6
        1 |         1 |      50 |         7
        1 |         1 |      50 |         8
        1 |         1 |      50 |         9
        1 |         1 |      50 |        10
        1 |         2 |      48 |         1
        1 |         2 |      48 |         2
        1 |         2 |      48 |         3
        1 |         2 |      48 |         4
        1 |         2 |      48 |         5
        1 |         2 |      48 |         6
        1 |         2 |      48 |         7
        1 |         2 |      48 |         8
        1 |         2 |      48 |         9
        1 |         2 |      48 |        10
        1 |         2 |      50 |         1
        1 |         2 |      50 |         2
        1 |         2 |      50 |         3
        1 |         2 |      50 |         4
        1 |         2 |      50 |         5
        1 |         2 |      50 |         6
        1 |         2 |      50 |         7
        1 |         2 |      50 |         8
        1 |         2 |      50 |         9
        1 |         2 |      50 |        10
        3 |         1 |      48 |         1
        3 |         1 |      48 |         2
        3 |         1 |      48 |         3
        3 |         1 |      48 |         4
        3 |         1 |      48 |         5
(33 rows)

fetch backward 34 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |      48 |         4
        3 |         1 |      48 |         3
        3 |         1 |      48 |         2
        3 |         1 |      48 |         1
        1 |         2 |      50 |        10
        1 |         2 |      50 |         9
        1 |         2 |      50 |         8
        1 |         2 |      50 |         7
        1 |         2 |      50 |         6
        1 |         2 |      50 |         5
        1 |         2 |      50 |         4
        1 |         2 |      50 |         3
        1 |         2 |      50 |         2
        1 |         2 |      50 |         1
        1 |         2 |      48 |        10
        1 |         2 |      48 |         9
        1 |         2 |      48 |         8
        1 |         2 |      48 |         7
        1 |         2 |      48 |         6
        1 |         2 |      48 |         5
        1 |         2 |      48 |         4
        1 |         2 |      48 |         3
        1 |         2 |      48 |         2
        1 |         2 |      48 |         1
        1 |         1 |      50 |        10
        1 |         1 |      50 |         9
        1 |         1 |      50 |         8
        1 |         1 |      50 |         7
        1 |         1 |      50 |         6
        1 |         1 |      50 |         5
        1 |         1 |      50 |         4
        1 |         1 |      50 |         3
        1 |         1 |      50 |         2
        1 |         1 |      50 |         1
(34 rows)

fetch forward  35 from back_up_terminate_toplevel_wrong;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         1 |      50 |         2
        1 |         1 |      50 |         3
        1 |         1 |      50 |         4
        1 |         1 |      50 |         5
        1 |         1 |      50 |         6
        1 |         1 |      50 |         7
        1 |         1 |      50 |         8
        1 |         1 |      50 |         9
        1 |         1 |      50 |        10
        1 |         2 |      48 |         1
        1 |         2 |      48 |         2
        1 |         2 |      48 |         3
        1 |         2 |      48 |         4
        1 |         2 |      48 |         5
        1 |         2 |      48 |         6
        1 |         2 |      48 |         7
        1 |         2 |      48 |         8
        1 |         2 |      48 |         9
        1 |         2 |      48 |        10
        1 |         2 |      50 |         1
        1 |         2 |      50 |         2
        1 |         2 |      50 |         3
        1 |         2 |      50 |         4
        1 |         2 |      50 |         5
        1 |         2 |      50 |         6
        1 |         2 |      50 |         7
        1 |         2 |      50 |         8
        1 |         2 |      50 |         9
        1 |         2 |      50 |        10
        3 |         1 |      48 |         1
        3 |         1 |      48 |         2
        3 |         1 |      48 |         3
        3 |         1 |      48 |         4
        3 |         1 |      48 |         5
        3 |         1 |      48 |         6
(35 rows)

commit;
create temp table outer_table                  (a int, b int);
create temp table restore_buggy_primscan_table (x int, y int);
create index buggy_idx on restore_buggy_primscan_table (x, y) with (deduplicate_items=off);
insert into outer_table                  select 1, b_vals from generate_series(1006, 1580) b_vals;
insert into restore_buggy_primscan_table select 1, x_vals from generate_series(1006, 1580) x_vals;
insert into outer_table                  select 1, 1370 from generate_series(1, 9) j;
insert into restore_buggy_primscan_table select 1, 1371 from generate_series(1, 9) j;
insert into restore_buggy_primscan_table select 1, 1380 from generate_series(1, 9) j;
vacuum analyze outer_table;
vacuum analyze restore_buggy_primscan_table;
select count(*), o.a, o.b
  from
    outer_table o
  inner join
    restore_buggy_primscan_table bug
  on o.a = bug.x and o.b = bug.y
where
  bug.x = 1 and
  bug.y = any(array[(select array_agg(i) from generate_series(1370, 1390) i where i % 10 = 0)])
group by o.a, o.b;
 count | a |  b   
-------+---+------
    10 | 1 | 1370
    10 | 1 | 1380
     1 | 1 | 1390
(3 rows)

-- Get test coverage for when so->needPrimScan is set at the point of calling
-- _bt_restore_array_keys().  This is handled like the case where the scan
-- direction changes "within" a page, relying on code from _bt_readnextpage().
create temp table outer_tab(
  a int,
  b int
);
create index outer_tab_idx on outer_tab(a, b) with (deduplicate_items = off);
create temp table primscanmarkcov_table(
  a int,
  b int
);
create index interesting_coverage_idx on primscanmarkcov_table(a, b) with (deduplicate_items = off);
insert into outer_tab             select 1, i from generate_series(1530, 1780) i;
insert into primscanmarkcov_table select 1, i from generate_series(1530, 1780) i;
insert into outer_tab             select 1, 1550 from generate_series(1, 200) i;
insert into primscanmarkcov_table select 1, 1551 from generate_series(1, 200) i;
vacuum analyze outer_tab;
vacuum analyze primscanmarkcov_table ;
with range_ints as ( select i from generate_series(1530, 1780) i)
select
  count(*), buggy.a, buggy.b from
outer_tab o
  inner join
primscanmarkcov_table buggy
  on o.a = buggy.a and o.b = buggy.b
where
  o.a = 1     and     o.b = any (array[(select array_agg(i) from range_ints where i % 50 = 0)])  and
  buggy.a = 1 and buggy.b = any (array[(select array_agg(i) from range_ints where i % 50 = 0)])
group by buggy.a, buggy.b
order by buggy.a, buggy.b;
 count | a |  b   
-------+---+------
   201 | 1 | 1550
     1 | 1 | 1600
     1 | 1 | 1650
     1 | 1 | 1700
     1 | 1 | 1750
(5 rows)

-- Get test coverage for when so->needPrimScan is set at the point of calling
-- _bt_restore_array_keys() for backwards scans.  More or less comparable to
-- the last test.
create temp table backwards_prim_outer_table             (a int, b int);
create temp table backwards_restore_buggy_primscan_table (x int, y int);
create index backward_prim_buggy_idx  on backwards_restore_buggy_primscan_table (x, y) with (deduplicate_items=off);
create index backwards_prim_drive_idx on backwards_prim_outer_table             (a, b) with (deduplicate_items=off);
insert into backwards_prim_outer_table                  select 0, 1360;
insert into backwards_prim_outer_table                  select 1, b_vals from generate_series(1012, 1406) b_vals where b_vals % 10 = 0;
insert into backwards_prim_outer_table                  select 1, 1370;
vacuum analyze backwards_prim_outer_table; -- Be tidy
-- Fill up "backwards_prim_drive_idx" index with 396 items, just about fitting
-- onto its only page, which is a root leaf page:
insert into backwards_restore_buggy_primscan_table select 0, 1360;
insert into backwards_restore_buggy_primscan_table select 1, x_vals from generate_series(1012, 1406) x_vals;
vacuum analyze backwards_restore_buggy_primscan_table; -- Be tidy
-- Now cause two page splits, leaving 4 leaf pages in total:
insert into backwards_restore_buggy_primscan_table select 1, 1370 from generate_series(1,250) i;
-- Now "buggy" index looks like this:
--
-- ┌───┬───────┬───────┬────────┬────────┬────────────┬───────┬───────┬───────────────────┬─────────┬───────────┬──────────────────┐
-- │ i │ blkno │ flags │ nhtids │ nhblks │ ndeadhblks │ nlive │ ndead │ nhtidschecksimple │ avgsize │ freespace │     highkey      │
-- ├───┼───────┼───────┼────────┼────────┼────────────┼───────┼───────┼───────────────────┼─────────┼───────────┼──────────────────┤
-- │ 1 │     1 │     1 │    203 │      1 │          0 │   204 │     0 │                 0 │      16 │     4,068 │ (x, y)=(1, 1214) │
-- │ 2 │     4 │     1 │    156 │      2 │          0 │   157 │     0 │                 0 │      16 │     5,008 │ (x, y)=(1, 1370) │
-- │ 3 │     5 │     1 │    251 │      2 │          0 │   252 │     0 │                 0 │      16 │     3,108 │ (x, y)=(1, 1371) │
-- │ 4 │     2 │     1 │     36 │      1 │          0 │    36 │     0 │                 0 │      16 │     7,428 │ ∅                │
-- └───┴───────┴───────┴────────┴────────┴────────────┴───────┴───────┴───────────────────┴─────────┴───────────┴──────────────────┘
select count(*), o.a, o.b
  from
    backwards_prim_outer_table o
  inner join
    backwards_restore_buggy_primscan_table bug
  on o.a = bug.x and o.b = bug.y
where
  bug.x in (0, 1) and
  bug.y = any(array[(select array_agg(i) from generate_series(1360, 1370) i where i % 10 = 0)])
group by o.a, o.b
order by o.a desc, o.b desc;
 count | a |  b   
-------+---+------
   502 | 1 | 1370
     1 | 1 | 1360
     1 | 0 | 1360
(3 rows)

