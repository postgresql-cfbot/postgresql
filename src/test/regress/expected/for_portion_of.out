-- Tests for UPDATE/DELETE FOR PORTION OF
-- Works on non-PK columns
CREATE TABLE for_portion_of_test (
  id int4range,
  valid_at tsrange,
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,1]', '[2018-01-02,2020-01-01)', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-15' TO '2019-01-01'
SET name = 'foo';
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2019-01-15' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid_at                         | name 
-------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Tue Jan 01 00:00:00 2019") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Tue Jan 01 00:00:00 2019","Tue Jan 15 00:00:00 2019") | one
(3 rows)

-- Works on more than one range
DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range,
  valid1_at tsrange,
  valid2_at tsrange,
  name text NOT NULL
);
INSERT INTO for_portion_of_test VALUES
('[1,1]', '[2018-01-02,2018-02-03)', '[2015-01-01,2025-01-01)', 'one');
UPDATE for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'foo';
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Wed Jan 01 00:00:00 2025") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Wed Jan 01 00:00:00 2025") | one
(2 rows)

UPDATE for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-15' TO UNBOUNDED
SET name = 'bar';
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Feb 03 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid1_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Wed Jan 01 00:00:00 2025") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
(4 rows)

DELETE FROM for_portion_of_test
FOR PORTION OF valid2_at FROM '2018-01-20' TO UNBOUNDED;
SELECT * FROM for_portion_of_test;
  id   |                        valid1_at                        |                        valid2_at                        | name 
-------+---------------------------------------------------------+---------------------------------------------------------+------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | one
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Thu Jan 01 00:00:00 2015","Mon Jan 15 00:00:00 2018") | foo
 [1,2) | ["Tue Jan 02 00:00:00 2018","Mon Jan 15 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | bar
 [1,2) | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | ["Mon Jan 15 00:00:00 2018","Sat Jan 20 00:00:00 2018") | bar
(4 rows)

DROP TABLE for_portion_of_test;
CREATE TABLE for_portion_of_test (
  id int4range NOT NULL,
  valid_at tsrange NOT NULL,
  name text NOT NULL,
	CONSTRAINT for_portion_of_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
INSERT INTO for_portion_of_test
VALUES
('[1,1]', '[2018-01-02,2018-02-03)', 'one'),
('[1,1]', '[2018-02-03,2018-03-03)', 'one'),
('[1,1]', '[2018-03-03,2018-04-04)', 'one'),
('[2,2]', '[2018-01-01,2018-01-05)', 'two'),
('[3,3]', '[2018-01-01,)', 'three'),
('[4,4]', '(,2018-04-01)', 'four'),
('[5,5]', '(,)', 'five')
;
--
-- UPDATE tests
--
-- Setting with a missing column fails
UPDATE for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'foo'
WHERE id = '[5,5]';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO UNBOUNDED
                       ^
-- Setting the range fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET valid_at = '[1990-01-01,1999-01-01)'
WHERE id = '[5,5]';
ERROR:  can't directly assign to "valid_at" in a FOR PORTION OF update
LINE 3: SET valid_at = '[1990-01-01,1999-01-01)'
            ^
-- The wrong type fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM 1 TO 4
SET name = 'nope'
WHERE id = '[3,3]';
ERROR:  function pg_catalog.tsrange(integer, integer) does not exist
LINE 2: FOR PORTION OF valid_at FROM 1 TO 4
                       ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Setting with timestamps reversed fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
SET name = 'three^1'
WHERE id = '[3,3]';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Setting with a subquery fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-06-01'
SET name = 'nope'
WHERE id = '[3,3]';
ERROR:  cannot use subquery in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM (SELECT '2018-01-01') TO '2018-...
                                     ^
-- Setting with a column fails
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM lower(valid_at) TO UNBOUNDED
SET name = 'nope'
WHERE id = '[3,3]';
ERROR:  cannot use column reference in FOR PORTION OF expression
LINE 2: FOR PORTION OF valid_at FROM lower(valid_at) TO UNBOUNDED
                                           ^
-- Setting with timestamps equal does nothing
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
SET name = 'three^0'
WHERE id = '[3,3]';
-- Updating a finite/open portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO UNBOUNDED
SET name = 'three^1'
WHERE id = '[3,3]';
-- Updating a finite/open portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-03-01'
SET name = 'three^2'
WHERE id = '[3,3]';
-- Updating an open/finite portion with an open/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO '2018-02-01'
SET name = 'four^1'
WHERE id = '[4,4]';
-- Updating an open/finite portion with a finite/open target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO UNBOUNDED
SET name = 'four^2'
WHERE id = '[4,4]';
-- Updating a finite/finite portion with an exact fit
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2018-02-01'
SET name = 'four^3'
WHERE id = '[4,4]';
-- Updating an enclosed span
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM UNBOUNDED TO UNBOUNDED
SET name = 'two^2'
WHERE id = '[2,2]';
-- Updating an open/open portion with a finite/finite target
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-01-01' TO '2019-01-01'
SET name = 'five^2'
WHERE id = '[5,5]';
-- Updating an enclosed span with separate protruding spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2017-01-01' TO '2020-01-01'
SET name = 'five^3'
WHERE id = '[5,5]';
-- Updating multiple enclosed spans
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
SET name = 'one^2'
WHERE id = '[1,1]';
-- Updating with a shift/reduce conflict
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '1' HOUR TO MINUTE
  TO '2019-01-01'
SET name = 'one^3'
WHERE id = '[1,1]';
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM '2018-03-01' AT TIME ZONE INTERVAL '2' HOUR
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,1]';
ERROR:  syntax error at or near "'2019-01-01'"
LINE 4:   TO '2019-01-01'
             ^
UPDATE for_portion_of_test
FOR PORTION OF valid_at
  FROM ('2018-03-01' AT TIME ZONE INTERVAL '2' HOUR)
  TO '2019-01-01'
SET name = 'one^4'
WHERE id = '[1,1]';
-- Updating the non-range part of the PK:
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-15' TO NULL
SET id = '[6,6]'
WHERE id = '[1,1]';
-- UPDATE with no WHERE clause
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2030-01-01' TO NULL
SET name = name || '*';
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |   name   
-------+---------------------------------------------------------+----------
 [1,2) | ["Tue Jan 02 00:00:00 2018","Sat Feb 03 00:00:00 2018") | one^2
 [1,2) | ["Sat Feb 03 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | three
 [3,4) | ["Fri Jun 01 00:00:00 2018","Tue Jan 01 00:00:00 2030") | three^1
 [3,4) | ["Tue Jan 01 00:00:00 2030",)                           | three^1*
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Tue Jan 01 00:00:00 2019") | five^3
 [5,6) | ["Tue Jan 01 00:00:00 2019","Wed Jan 01 00:00:00 2020") | five^3
 [5,6) | ["Wed Jan 01 00:00:00 2020","Tue Jan 01 00:00:00 2030") | five
 [5,6) | ["Tue Jan 01 00:00:00 2030",)                           | five*
 [6,7) | ["Thu Feb 15 00:00:00 2018","Thu Mar 01 08:01:00 2018") | one^2
 [6,7) | ["Thu Mar 01 08:01:00 2018","Thu Mar 01 10:00:00 2018") | one^3
 [6,7) | ["Thu Mar 01 10:00:00 2018","Sat Mar 03 00:00:00 2018") | one^4
 [6,7) | ["Sat Mar 03 00:00:00 2018","Wed Apr 04 00:00:00 2018") | one^4
(20 rows)

--
-- DELETE tests
--
-- Deleting with a missing column fails
DELETE FROM for_portion_of_test
FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
WHERE id = '[5,5]';
ERROR:  column or period "invalid_at" of relation "for_portion_of_test" does not exist
LINE 2: FOR PORTION OF invalid_at FROM '2018-06-01' TO NULL
                       ^
-- Deleting with timestamps reversed fails
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2018-01-01'
WHERE id = '[3,3]';
ERROR:  range lower bound must be less than or equal to range upper bound
-- Deleting with timestamps equal does nothing
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO '2018-04-01'
WHERE id = '[3,3]';
-- Deleting with a closed/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-06-01' TO '2020-06-01'
WHERE id = '[5,5]';
-- Deleting with a closed/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2018-04-01' TO NULL
WHERE id = '[3,3]';
-- Deleting with an open/closed target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO '2018-02-08'
WHERE id = '[1,1]';
-- Deleting with an open/open target
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM NULL TO NULL
WHERE id = '[6,6]';
-- DELETE with no WHERE clause
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2025-01-01' TO NULL;
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [1,2) | ["Thu Feb 08 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | three
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025") | five
(11 rows)

-- UPDATE ... RETURNING returns only the updated values (not the inserted side values)
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2018-02-01' TO '2018-02-15'
SET name = 'three^3'
WHERE id = '[3,3]'
RETURNING *;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [3,4) | ["Thu Feb 01 00:00:00 2018","Thu Feb 15 00:00:00 2018") | three^3
(1 row)

-- test that we run triggers on the UPDATE/DELETEd row and the INSERTed rows
CREATE FUNCTION for_portion_of_trigger()
RETURNS trigger
AS
$$
BEGIN
  RAISE NOTICE '% % % of %', TG_WHEN, TG_OP, NEW.valid_at, OLD.valid_at;
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;
END;
$$
LANGUAGE plpgsql;
CREATE TRIGGER trg_for_portion_of_before_insert
  BEFORE INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_insert
  AFTER INSERT ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_update
  BEFORE UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_update
  AFTER UPDATE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_before_delete
  BEFORE DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
CREATE TRIGGER trg_for_portion_of_after_delete
  AFTER DELETE ON for_portion_of_test
  FOR EACH ROW
  EXECUTE FUNCTION for_portion_of_trigger();
UPDATE for_portion_of_test
FOR PORTION OF valid_at FROM '2021-01-01' TO '2022-01-01'
SET name = 'five^4'
WHERE id = '[5,5]';
NOTICE:  BEFORE UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER UPDATE ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") of ["Mon Jun 01 00:00:00 2020","Wed Jan 01 00:00:00 2025")
DELETE FROM for_portion_of_test
FOR PORTION OF valid_at FROM '2023-01-01' TO '2024-01-01'
WHERE id = '[5,5]';
NOTICE:  BEFORE DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
NOTICE:  BEFORE INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  BEFORE INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER INSERT ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") of <NULL>
NOTICE:  AFTER INSERT ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") of <NULL>
NOTICE:  AFTER DELETE <NULL> of ["Sat Jan 01 00:00:00 2022","Wed Jan 01 00:00:00 2025")
SELECT * FROM for_portion_of_test ORDER BY id, valid_at;
  id   |                        valid_at                         |  name   
-------+---------------------------------------------------------+---------
 [1,2) | ["Thu Feb 08 00:00:00 2018","Thu Feb 15 00:00:00 2018") | one^2
 [2,3) | ["Mon Jan 01 00:00:00 2018","Fri Jan 05 00:00:00 2018") | two^2
 [3,4) | ["Mon Jan 01 00:00:00 2018","Thu Feb 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Feb 01 00:00:00 2018","Thu Feb 15 00:00:00 2018") | three^3
 [3,4) | ["Thu Feb 15 00:00:00 2018","Thu Mar 01 00:00:00 2018") | three^2
 [3,4) | ["Thu Mar 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | three
 [4,5) | (,"Sun Jan 01 00:00:00 2017")                           | four^1
 [4,5) | ["Sun Jan 01 00:00:00 2017","Thu Feb 01 00:00:00 2018") | four^3
 [4,5) | ["Thu Feb 01 00:00:00 2018","Sun Apr 01 00:00:00 2018") | four^2
 [5,6) | (,"Sun Jan 01 00:00:00 2017")                           | five
 [5,6) | ["Sun Jan 01 00:00:00 2017","Mon Jan 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jan 01 00:00:00 2018","Fri Jun 01 00:00:00 2018") | five^3
 [5,6) | ["Mon Jun 01 00:00:00 2020","Fri Jan 01 00:00:00 2021") | five
 [5,6) | ["Fri Jan 01 00:00:00 2021","Sat Jan 01 00:00:00 2022") | five^4
 [5,6) | ["Sat Jan 01 00:00:00 2022","Sun Jan 01 00:00:00 2023") | five
 [5,6) | ["Mon Jan 01 00:00:00 2024","Wed Jan 01 00:00:00 2025") | five
(16 rows)

-- Test with a custom range type
CREATE TYPE mydaterange AS range(subtype=date);
CREATE TABLE for_portion_of_test2 (
  id int4range NOT NULL,
  valid_at mydaterange NOT NULL,
  name text NOT NULL,
	CONSTRAINT for_portion_of_test2_pk PRIMARY KEY (id, valid_at WITHOUT OVERLAPS)
);
INSERT INTO for_portion_of_test2
VALUES
('[1,1]', '[2018-01-02,2018-02-03)', 'one'),
('[1,1]', '[2018-02-03,2018-03-03)', 'one'),
('[1,1]', '[2018-03-03,2018-04-04)', 'one'),
('[2,2]', '[2018-01-01,2018-05-01)', 'two'),
('[3,3]', '[2018-01-01,)', 'three');
;
UPDATE for_portion_of_test2
FOR PORTION OF valid_at FROM '2018-01-10' TO '2018-02-10'
SET name = 'one^1'
WHERE id = '[1,1]';
DELETE FROM for_portion_of_test2
FOR PORTION OF valid_at FROM '2018-01-15' TO '2018-02-15'
WHERE id = '[2,2]';
SELECT * FROM for_portion_of_test2 ORDER BY id, valid_at;
  id   |        valid_at         | name  
-------+-------------------------+-------
 [1,2) | [01-02-2018,01-10-2018) | one
 [1,2) | [01-10-2018,02-03-2018) | one^1
 [1,2) | [02-03-2018,02-10-2018) | one^1
 [1,2) | [02-10-2018,03-03-2018) | one
 [1,2) | [03-03-2018,04-04-2018) | one
 [2,3) | [01-01-2018,01-15-2018) | two
 [2,3) | [02-15-2018,05-01-2018) | two
 [3,4) | [01-01-2018,)           | three
(8 rows)

DROP TABLE for_portion_of_test2;
DROP TYPE mydaterange;
