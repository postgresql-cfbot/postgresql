--
-- PARALLEL
--
begin;
-- encourage use of parallel plans
set parallel_setup_cost=0;
set parallel_tuple_cost=0;
set min_parallel_table_scan_size=0;
set max_parallel_workers_per_gather=4;
--
-- Test write operations that has an underlying query that is eligible
-- for parallel plans
--
explain (costs off) create table parallel_write as
    select length(stringu1) from tenk1 group by length(stringu1);
                    QUERY PLAN                     
---------------------------------------------------
 Finalize HashAggregate
   Group Key: (length((stringu1)::text))
   ->  Gather
         Workers Planned: 4
         ->  Partial HashAggregate
               Group Key: length((stringu1)::text)
               ->  Parallel Seq Scan on tenk1
(7 rows)

create table parallel_write as
    select length(stringu1) from tenk1 group by length(stringu1);
drop table parallel_write;
explain (costs off) select length(stringu1) into parallel_write
    from tenk1 group by length(stringu1);
                    QUERY PLAN                     
---------------------------------------------------
 Finalize HashAggregate
   Group Key: (length((stringu1)::text))
   ->  Gather
         Workers Planned: 4
         ->  Partial HashAggregate
               Group Key: length((stringu1)::text)
               ->  Parallel Seq Scan on tenk1
(7 rows)

select length(stringu1) into parallel_write
    from tenk1 group by length(stringu1);
drop table parallel_write;
explain (costs off) create materialized view parallel_mat_view as
    select length(stringu1) from tenk1 group by length(stringu1);
                    QUERY PLAN                     
---------------------------------------------------
 Finalize HashAggregate
   Group Key: (length((stringu1)::text))
   ->  Gather
         Workers Planned: 4
         ->  Partial HashAggregate
               Group Key: length((stringu1)::text)
               ->  Parallel Seq Scan on tenk1
(7 rows)

create materialized view parallel_mat_view as
    select length(stringu1) from tenk1 group by length(stringu1);
create unique index on parallel_mat_view(length);
refresh materialized view parallel_mat_view;
refresh materialized view concurrently parallel_mat_view;
drop materialized view parallel_mat_view;
prepare prep_stmt as select length(stringu1) from tenk1 group by length(stringu1);
explain (costs off) create table parallel_write as execute prep_stmt;
                    QUERY PLAN                     
---------------------------------------------------
 Finalize HashAggregate
   Group Key: (length((stringu1)::text))
   ->  Gather
         Workers Planned: 4
         ->  Partial HashAggregate
               Group Key: length((stringu1)::text)
               ->  Parallel Seq Scan on tenk1
(7 rows)

create table parallel_write as execute prep_stmt;
drop table parallel_write;
--
-- Test parallel inserts in create table as/select into/create materialized
-- view.
--
-- Parallel queries won't necessarily get as many workers as the planner
-- asked for.  This affects not only the "Workers Launched:" field of EXPLAIN
-- results, but also row counts and loop counts for parallel scans, Gathers,
-- and everything in between.  This function filters out the values we can't
-- rely on to be stable.
-- This removes enough info that you might wonder why bother with EXPLAIN
-- ANALYZE at all.  The answer is that we need to see whether the parallel
-- inserts are being done by the workers, the only way is that
-- Create <<tbl_name>> appears in the explain output.
create function explain_pictas(text) returns setof text
language plpgsql as
$$
declare
    ln text;
begin
    for ln in
        execute format('explain (analyze, costs off, summary off, timing off) %s',
            $1)
    loop
        ln := regexp_replace(ln, 'Workers Launched: \d+', 'Workers Launched: N');
        ln := regexp_replace(ln, 'actual rows=\d+ loops=\d+', 'actual rows=N loops=N');
        ln := regexp_replace(ln, 'Rows Removed by Filter: \d+', 'Rows Removed by Filter: N');
        ln := regexp_replace(ln, '\m\d+kB', 'NkB', 'g');
        ln := regexp_replace(ln, 'Buckets: \d+', 'Buckets: N');
        ln := regexp_replace(ln, 'Batches: \d+', 'Batches: N');
        return next ln;
    end loop;
end;
$$;
-- parallel inserts must occur as the CTAS creates a normal table
select explain_pictas(
'create table parallel_write as select length(stringu1) from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

-- check if the parallel insertions have happened within the same xact, if yes,
-- there should be a single cmin and xmin i.e. below query should output 1
select count(*) from (select distinct cmin, xmin from parallel_write) as dt;
 count 
-------
     1
(1 row)

drop table parallel_write;
-- parallel inserts must not occur as the table is temporary
select explain_pictas(
'create temporary table parallel_write as select length(stringu1) from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(4 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must occur as the CTAS creates an unlogged table
select explain_pictas(
'create unlogged table parallel_write as select length(stringu1) from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must occur as the select into creates a normal table
select explain_pictas(
'select length(stringu1) into parallel_write from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must not occur as the table is temporary
select explain_pictas(
'select length(stringu1) into temporary parallel_write from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(4 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must occur as the select into creates an unlogged table
select explain_pictas(
'select length(stringu1) into unlogged parallel_write from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must not occur as the parallelism will not be picked
-- for select part because of for update clause
select explain_pictas(
'create table parallel_write as select length(stringu1) from tenk1 for update;');
                 explain_pictas                  
-------------------------------------------------
 LockRows (actual rows=N loops=N)
   ->  Seq Scan on tenk1 (actual rows=N loops=N)
(2 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
-- parallel inserts must occur as the materialized view is being created here
select explain_pictas(
'create materialized view parallel_mat_view as
    select length(stringu1) from tenk1;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_mat_view
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_mat_view;
 count 
-------
 10000
(1 row)

drop materialized view parallel_mat_view;
-- parallel inserts must occur as the CTAS creates the table using prepared
-- statement for which parallelism would have been picked
prepare parallel_write_prep as select length(stringu1) from tenk1;
select explain_pictas(
'create table parallel_write as execute parallel_write_prep;');
                      explain_pictas                      
----------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

deallocate parallel_write_prep;
drop table parallel_write;
-- parallel inserts must not occur as the parallelism will not be picked
-- for select part because of the parallel unsafe function
create sequence parallel_write_sequence;
select explain_pictas(
E'create table parallel_write as
    select nextval(\'parallel_write_sequence\'), four from tenk1;');
              explain_pictas               
-------------------------------------------
 Seq Scan on tenk1 (actual rows=N loops=N)
(1 row)

select count(*) from parallel_write;
 count 
-------
 10000
(1 row)

drop table parallel_write;
drop sequence parallel_write_sequence;
-- parallel inserts must occur, as there is init plan that gets executed by
-- each parallel worker
select explain_pictas(
'create table parallel_write as select two col1,
    (select two from (select * from tenk2) as tt limit 1) col2
    from tenk1  where tenk1.four = 3;');
                             explain_pictas                             
------------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Params Evaluated: $1
   Workers Launched: N
 ->  Create parallel_write
   InitPlan 1 (returns $1)
     ->  Limit (actual rows=N loops=N)
           ->  Gather (actual rows=N loops=N)
                 Workers Planned: 4
                 Workers Launched: N
                 ->  Parallel Seq Scan on tenk2 (actual rows=N loops=N)
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
         Filter: (four = 3)
         Rows Removed by Filter: N
(14 rows)

select count(*) from parallel_write;
 count 
-------
  2500
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is sub plan that gets executed by
-- the Gather node in leader
select explain_pictas(
'create table parallel_write as select two col1,
    (select tenk1.two from generate_series(1,1)) col2
    from tenk1  where tenk1.four = 3;');
                          explain_pictas                          
------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 4
   Workers Launched: N
   ->  Parallel Seq Scan on tenk1 (actual rows=N loops=N)
         Filter: (four = 3)
         Rows Removed by Filter: N
   SubPlan 1
     ->  Function Scan on generate_series (actual rows=N loops=N)
(8 rows)

select count(*) from parallel_write;
 count 
-------
  2500
(1 row)

drop table parallel_write;
create table temp1(col1) as select * from generate_series(1,5);
create table temp2(col2) as select * from temp1;
create table temp3(col3) as select * from temp1;
-- parallel inserts must not occur, as there is a limit clause
select explain_pictas(
'create table parallel_write as select * from temp1 limit 4;');
                         explain_pictas                         
----------------------------------------------------------------
 Limit (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(5 rows)

select count(*) from parallel_write;
 count 
-------
     4
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is an order by clause
select explain_pictas(
'create table parallel_write as select * from temp1 order by 1;');
                         explain_pictas                         
----------------------------------------------------------------
 Gather Merge (actual rows=N loops=N)
   Workers Planned: 3
   Workers Launched: N
   ->  Sort (actual rows=N loops=N)
         Sort Key: col1
         Sort Method: quicksort  Memory: NkB
         Worker 0:  Sort Method: quicksort  Memory: NkB
         Worker 1:  Sort Method: quicksort  Memory: NkB
         Worker 2:  Sort Method: quicksort  Memory: NkB
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(10 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is an order by clause
select explain_pictas(
'create table parallel_write as select * from temp1 order by 1;');
                         explain_pictas                         
----------------------------------------------------------------
 Gather Merge (actual rows=N loops=N)
   Workers Planned: 3
   Workers Launched: N
   ->  Sort (actual rows=N loops=N)
         Sort Key: col1
         Sort Method: quicksort  Memory: NkB
         Worker 0:  Sort Method: quicksort  Memory: NkB
         Worker 1:  Sort Method: quicksort  Memory: NkB
         Worker 2:  Sort Method: quicksort  Memory: NkB
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(10 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is a distinct clause
select explain_pictas(
'create table parallel_write as select distinct * from temp1;');
                         explain_pictas                         
----------------------------------------------------------------
 HashAggregate (actual rows=N loops=N)
   Group Key: col1
   Batches: N  Memory Usage: NkB
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(7 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is an aggregate and group clause
select explain_pictas(
'create table parallel_write as select count(*) from temp1 group by col1;');
                            explain_pictas                            
----------------------------------------------------------------------
 Finalize HashAggregate (actual rows=N loops=N)
   Group Key: col1
   Batches: N  Memory Usage: NkB
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
         ->  Partial HashAggregate (actual rows=N loops=N)
               Group Key: col1
               Batches: N  Memory Usage: NkB
               Worker 0:  Batches: N  Memory Usage: NkB
               Worker 1:  Batches: N  Memory Usage: NkB
               Worker 2:  Batches: N  Memory Usage: NkB
               ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(13 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is an aggregate, group and having
-- clauses
select explain_pictas(
'create table parallel_write as
    select count(col1), (select col3 from
        (select * from temp3) as tt limit 1) col4 from temp1, temp2
    where temp1.col1 = temp2.col2 group by col4 having count(col1) > 0;');
                                  explain_pictas                                  
----------------------------------------------------------------------------------
 Finalize GroupAggregate (actual rows=N loops=N)
   Group Key: ($1)
   Filter: (count(temp1.col1) > 0)
   InitPlan 1 (returns $1)
     ->  Limit (actual rows=N loops=N)
           ->  Gather (actual rows=N loops=N)
                 Workers Planned: 3
                 Workers Launched: N
                 ->  Parallel Seq Scan on temp3 (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $1
         Workers Launched: N
         ->  Partial GroupAggregate (actual rows=N loops=N)
               Group Key: $1
               ->  Parallel Hash Join (actual rows=N loops=N)
                     Hash Cond: (temp1.col1 = temp2.col2)
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
                     ->  Parallel Hash (actual rows=N loops=N)
                           Buckets: N  Batches: N  Memory Usage: NkB
                           ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(21 rows)

select count(*) from parallel_write;
 count 
-------
     1
(1 row)

drop table parallel_write;
-- parallel inserts must not occur, as there is a window function
select explain_pictas(
'create table parallel_write as
    select avg(col1) OVER (PARTITION BY col1) from temp1;');
                            explain_pictas                            
----------------------------------------------------------------------
 WindowAgg (actual rows=N loops=N)
   ->  Gather Merge (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
         ->  Sort (actual rows=N loops=N)
               Sort Key: col1
               Sort Method: quicksort  Memory: NkB
               Worker 0:  Sort Method: quicksort  Memory: NkB
               Worker 1:  Sort Method: quicksort  Memory: NkB
               Worker 2:  Sort Method: quicksort  Memory: NkB
               ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
(11 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- nested loop join is the top node under which Gather node exists, so parallel
-- inserts must not occur
set enable_nestloop to on;
set enable_mergejoin to off;
set enable_hashjoin to off;
select explain_pictas(
'create table parallel_write as
    select * from temp1, temp2  where temp1.col1 = temp2.col2;');
                            explain_pictas                            
----------------------------------------------------------------------
 Nested Loop (actual rows=N loops=N)
   Join Filter: (temp1.col1 = temp2.col2)
   Rows Removed by Join Filter: 20
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
   ->  Materialize (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Workers Launched: N
               ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(12 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
-- parallel hash join happens under Gather node, so parallel inserts must occur
set enable_hashjoin to on;
set enable_nestloop to off;
select explain_pictas(
'create table parallel_write as
    select * from temp1, temp2  where temp1.col1 = temp2.col2;');
                            explain_pictas                            
----------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 3
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Hash Join (actual rows=N loops=N)
         Hash Cond: (temp1.col1 = temp2.col2)
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Parallel Hash (actual rows=N loops=N)
               Buckets: N  Batches: N  Memory Usage: NkB
               ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(10 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
reset enable_nestloop;
reset enable_mergejoin;
reset enable_hashjoin;
-- test cases for performing parallel inserts when Append node is at the top
-- and Gather node is in one of its direct sub plans.
-- case 1: parallel inserts must occur at each Gather node as we can push the
-- CTAS dest receiver.
-- Append
-- 	->Gather
-- 		->Parallel Seq Scan
-- 	->Gather
-- 		->Parallel Seq Scan
-- 	->Gather
-- 		->Parallel Seq Scan
select explain_pictas(
'create table parallel_write as
    select * from temp1 where col1 = 5 union all
    select * from temp2 where col2 = 5 union all
    select * from temp2 where col2 = 5;');
                            explain_pictas                            
----------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
               Filter: (col1 = 5)
               Rows Removed by Filter: N
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
               Filter: (col2 = 5)
               Rows Removed by Filter: N
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
               Filter: (col2 = 5)
               Rows Removed by Filter: N
(22 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

drop table parallel_write;
-- case 2: parallel inserts must occur at the top Gather node as we can push
-- the CTAS dest receiver to it.
-- Gather
-- 	->Parallel Append
-- 		->Parallel Seq Scan
-- 		->Parallel Seq Scan
-- 		->Parallel Seq Scan
select explain_pictas(
'create table parallel_write as
    select * from temp1 union all
    select * from temp2 union all
    select * from temp2;');
                             explain_pictas                             
------------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 3
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Append (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
(8 rows)

select count(*) from parallel_write;
 count 
-------
    15
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select (select col2 from temp2 limit 1) col2 from temp1 union all
    select (select col2 from temp2 limit 1) col2 from temp1 union all
    select * from temp2;');
                                 explain_pictas                                 
--------------------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 3
   Params Evaluated: $1, $3
   Workers Launched: N
 ->  Create parallel_write
   InitPlan 1 (returns $1)
     ->  Limit (actual rows=N loops=N)
           ->  Gather (actual rows=N loops=N)
                 Workers Planned: 3
                 Workers Launched: N
                 ->  Parallel Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
   InitPlan 2 (returns $3)
     ->  Limit (actual rows=N loops=N)
           ->  Gather (actual rows=N loops=N)
                 Workers Planned: 3
                 Workers Launched: N
                 ->  Parallel Seq Scan on temp2 temp2_2 (actual rows=N loops=N)
   ->  Parallel Append (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(21 rows)

select count(*) from parallel_write;
 count 
-------
    15
(1 row)

drop table parallel_write;
-- case 3: parallel inserts must occur at each Gather node as we can push the
-- CTAS dest receiver. Non-Gather nodes will do inserts by sending tuples to
-- Append and from there to CTAS dest receiver.
-- Append
-- 	->Gather
-- 		->Parallel Seq Scan
-- 	->Seq Scan / Join / any other non-Gather node
-- 	->Gather
-- 		->Parallel Seq Scan
select explain_pictas(
'create table parallel_write as
    select * from temp1 where col1 = 5 union all
    select (select temp1.col1 from temp2 limit 1) col2 from temp1 union all
    select * from temp1 where col1 = 5;');
                                explain_pictas                                
------------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
               Filter: (col1 = 5)
               Rows Removed by Filter: N
   ->  Seq Scan on temp1 (actual rows=N loops=N)
         SubPlan 1
           ->  Limit (actual rows=N loops=N)
                 ->  Gather (actual rows=N loops=N)
                       Workers Planned: 3
                       Workers Launched: N
                       ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp1 temp1_2 (actual rows=N loops=N)
               Filter: (col1 = 5)
               Rows Removed by Filter: N
(22 rows)

select count(*) from parallel_write;
 count 
-------
     7
(1 row)

drop table parallel_write;
alter table temp2 set (parallel_workers = 0);
select explain_pictas(
'create table parallel_write as select * from temp1 where col1 = (select 1) union all
    select * from temp1 where col1 = (select 1) union all
 select * from temp2 where col2 = (select 2);');
                             explain_pictas                             
------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $0
         Workers Launched: N
       ->  Create parallel_write
       InitPlan 1 (returns $0)
           ->  Result (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
               Filter: (col1 = $0)
               Rows Removed by Filter: N
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $1
         Workers Launched: N
       ->  Create parallel_write
       InitPlan 2 (returns $1)
           ->  Result (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
               Filter: (col1 = $1)
               Rows Removed by Filter: N
   ->  Seq Scan on temp2 (actual rows=N loops=N)
         Filter: (col2 = $2)
         Rows Removed by Filter: N
         InitPlan 3 (returns $2)
           ->  Result (actual rows=N loops=N)
(26 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

alter table temp2 reset (parallel_workers);
drop table parallel_write;
-- case 4: parallel inserts must not occur as there will be no direct Gather
-- node under Append node. Non-Gather nodes will do inserts by sending tuples
-- to Append and from there to CTAS dest receiver.
-- Append
-- 	->Seq Scan / Join / any other non-Gather node
-- 	->Seq Scan / Join / any other non-Gather node
-- 	->Seq Scan / Join / any other non-Gather node
select explain_pictas(
'create table parallel_write as
    select * from temp1 union all
    select * from temp2 union all
    select (select temp1.col1 from temp2 limit 1) col2 from temp1;');
                                    explain_pictas                                    
--------------------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Seq Scan on temp1 (actual rows=N loops=N)
   ->  Seq Scan on temp2 (actual rows=N loops=N)
   ->  Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
         SubPlan 1
           ->  Limit (actual rows=N loops=N)
                 ->  Gather (actual rows=N loops=N)
                       Workers Planned: 3
                       Workers Launched: N
                       ->  Parallel Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
(10 rows)

select count(*) from parallel_write;
 count 
-------
    15
(1 row)

drop table parallel_write;
-- case 5: parallel inserts must occur at the top Gather node as we can push
-- the CTAS dest receiver to it.
-- Gather
-- 	->Parallel Append
-- 		->Seq Scan / Join / any other non-Gather node
-- 		->Parallel Seq Scan
-- 		->Parallel Seq Scan
alter table temp2 set (parallel_workers = 0);
select explain_pictas(
'create table parallel_write as
    select * from temp1 union all
    select * from temp2 union all
    select * from temp1;');
                             explain_pictas                             
------------------------------------------------------------------------
 Gather (actual rows=N loops=N)
   Workers Planned: 3
   Workers Launched: N
 ->  Create parallel_write
   ->  Parallel Append (actual rows=N loops=N)
         ->  Seq Scan on temp2 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
(8 rows)

select count(*) from parallel_write;
 count 
-------
    15
(1 row)

drop table parallel_write;
alter table temp2 reset (parallel_workers);
-- case 6: parallel inserts must occur at each Gather node as we can push the
-- CTAS dest receiver.
-- Append
--  ->Append
--     ->Gather
-- 		->Parallel Seq Scan
--  ->Append
--     ->Gather
-- 		->Parallel Seq Scan
--  ->Gather
--  ->Gather
select explain_pictas(
'create table parallel_write as
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from temp2 where col2 = (select 2) union all
    select * from temp2 where col2 = (select 2);');
                               explain_pictas                               
----------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         InitPlan 1 (returns $0)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $1
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 2 (returns $1)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($1 = $0)
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
                           Filter: (col1 = $0)
                           Rows Removed by Filter: N
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $2
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 3 (returns $2)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($2 = $0)
                     ->  Parallel Seq Scan on temp2 (never executed)
                           Filter: (col2 = $0)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $3
         Workers Launched: N
       ->  Create parallel_write
       InitPlan 4 (returns $3)
           ->  Result (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
               Filter: (col2 = $3)
               Rows Removed by Filter: N
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $4
         Workers Launched: N
       ->  Create parallel_write
       InitPlan 5 (returns $4)
           ->  Result (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp2 temp2_2 (actual rows=N loops=N)
               Filter: (col2 = $4)
               Rows Removed by Filter: N
(47 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from temp1 where col1 = 5 union all
    select * from temp2 where col2 = 5;');
                                   explain_pictas                                   
------------------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         InitPlan 1 (returns $0)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $1
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 2 (returns $1)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($1 = $0)
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
                           Filter: (col1 = $0)
                           Rows Removed by Filter: N
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $2
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 3 (returns $2)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($2 = $0)
                     ->  Parallel Seq Scan on temp2 (never executed)
                           Filter: (col2 = $0)
   ->  Append (actual rows=N loops=N)
         InitPlan 4 (returns $3)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $3, $4
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 5 (returns $4)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($4 = $3)
                     ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
                           Filter: (col1 = $3)
                           Rows Removed by Filter: N
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $3, $5
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 6 (returns $5)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($5 = $3)
                     ->  Parallel Seq Scan on temp2 temp2_1 (never executed)
                           Filter: (col2 = $3)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp1 temp1_2 (actual rows=N loops=N)
               Filter: (col1 = 5)
               Rows Removed by Filter: N
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp2 temp2_2 (actual rows=N loops=N)
               Filter: (col2 = 5)
               Rows Removed by Filter: N
(67 rows)

select count(*) from parallel_write;
 count 
-------
     4
(1 row)

drop table parallel_write;
-- case 7: parallel inserts must occur at each Gather node as we can push the
-- CTAS dest receiver. Non-Gather nodes will do inserts by sending tuples
-- to Append and from there to CTAS dest receiver.
-- Append
--  ->Append
--     ->Gather
-- 		->Parallel Seq Scan
--  ->Append
--     ->Gather
-- 		->Parallel Seq Scan
--  ->Seq Scan / Join / any other non-Gather node
--  ->Gather
alter table temp2 set (parallel_workers = 0);
select explain_pictas(
'create table parallel_write as
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from temp2 where col2 = (select 2) union all
    select * from temp1 where col1 = (select 2);');
                               explain_pictas                               
----------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         InitPlan 1 (returns $0)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $1
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 2 (returns $1)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($1 = $0)
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
                           Filter: (col1 = $0)
                           Rows Removed by Filter: N
         ->  Result (actual rows=N loops=N)
               One-Time Filter: ($2 = $0)
               InitPlan 3 (returns $2)
                 ->  Result (actual rows=N loops=N)
               ->  Seq Scan on temp2 (never executed)
                     Filter: (col2 = $0)
   ->  Seq Scan on temp2 temp2_1 (actual rows=N loops=N)
         Filter: (col2 = $3)
         Rows Removed by Filter: N
         InitPlan 4 (returns $3)
           ->  Result (actual rows=N loops=N)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Params Evaluated: $4
         Workers Launched: N
       ->  Create parallel_write
       InitPlan 5 (returns $4)
           ->  Result (actual rows=N loops=N)
         ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
               Filter: (col1 = $4)
               Rows Removed by Filter: N
(37 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from (select * from temp1 where col1 = (select 1) union all
            select * from temp2 where col2 = (select 2)) as tt
        where col1 = (select 1) union all
    select * from temp1 where col1 = 5 union all
    select * from temp2 where col2 = 5;');
                                   explain_pictas                                   
------------------------------------------------------------------------------------
 Append (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         InitPlan 1 (returns $0)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $0, $1
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 2 (returns $1)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($1 = $0)
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
                           Filter: (col1 = $0)
                           Rows Removed by Filter: N
         ->  Result (actual rows=N loops=N)
               One-Time Filter: ($2 = $0)
               InitPlan 3 (returns $2)
                 ->  Result (actual rows=N loops=N)
               ->  Seq Scan on temp2 (never executed)
                     Filter: (col2 = $0)
   ->  Append (actual rows=N loops=N)
         InitPlan 4 (returns $3)
           ->  Result (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Params Evaluated: $3, $4
               Workers Launched: N
             ->  Create parallel_write
             InitPlan 5 (returns $4)
                 ->  Result (actual rows=N loops=N)
               ->  Result (actual rows=N loops=N)
                     One-Time Filter: ($4 = $3)
                     ->  Parallel Seq Scan on temp1 temp1_1 (actual rows=N loops=N)
                           Filter: (col1 = $3)
                           Rows Removed by Filter: N
         ->  Result (actual rows=N loops=N)
               One-Time Filter: ($5 = $3)
               InitPlan 6 (returns $5)
                 ->  Result (actual rows=N loops=N)
               ->  Seq Scan on temp2 temp2_1 (never executed)
                     Filter: (col2 = $3)
   ->  Gather (actual rows=N loops=N)
         Workers Planned: 3
         Workers Launched: N
       ->  Create parallel_write
       ->  Parallel Seq Scan on temp1 temp1_2 (actual rows=N loops=N)
               Filter: (col1 = 5)
               Rows Removed by Filter: N
   ->  Seq Scan on temp2 temp2_2 (actual rows=N loops=N)
         Filter: (col2 = 5)
         Rows Removed by Filter: N
(53 rows)

select count(*) from parallel_write;
 count 
-------
     4
(1 row)

drop table parallel_write;
alter table temp2 reset (parallel_workers);
-- case 8: parallel inserts must not occur because there is no Gather or Append
-- node at the top for union, except/except all, intersect/intersect all
-- cases.
select explain_pictas(
'create table parallel_write as
    select * from temp1 union
    select * from temp2;');
                            explain_pictas                            
----------------------------------------------------------------------
 HashAggregate (actual rows=N loops=N)
   Group Key: temp1.col1
   Batches: N  Memory Usage: NkB
   ->  Append (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Workers Launched: N
               ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Gather (actual rows=N loops=N)
               Workers Planned: 3
               Workers Launched: N
               ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(12 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from temp1 except
    select * from temp2 where col2 < 3;');
                               explain_pictas                               
----------------------------------------------------------------------------
 HashSetOp Except (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 1" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 2" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
                           Filter: (col2 < 3)
                           Rows Removed by Filter: N
(14 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from temp1 except all
    select * from temp2 where col2 < 3;');
                               explain_pictas                               
----------------------------------------------------------------------------
 HashSetOp Except All (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 1" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 2" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
                           Filter: (col2 < 3)
                           Rows Removed by Filter: N
(14 rows)

select count(*) from parallel_write;
 count 
-------
     3
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from temp1 intersect
    select * from temp2;');
                               explain_pictas                               
----------------------------------------------------------------------------
 HashSetOp Intersect (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 1" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 2" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(12 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
select explain_pictas(
'create table parallel_write as
    select * from temp1 intersect all
    select * from temp2;');
                               explain_pictas                               
----------------------------------------------------------------------------
 HashSetOp Intersect All (actual rows=N loops=N)
   ->  Append (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 1" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp1 (actual rows=N loops=N)
         ->  Subquery Scan on "*SELECT* 2" (actual rows=N loops=N)
               ->  Gather (actual rows=N loops=N)
                     Workers Planned: 3
                     Workers Launched: N
                     ->  Parallel Seq Scan on temp2 (actual rows=N loops=N)
(12 rows)

select count(*) from parallel_write;
 count 
-------
     5
(1 row)

drop table parallel_write;
drop table temp1;
drop table temp2;
drop table temp3;
drop function explain_pictas(text);
rollback;
