--
-- PUBLICATION
--
CREATE ROLE regress_publication_user LOGIN SUPERUSER;
CREATE ROLE regress_publication_user2;
CREATE ROLE regress_publication_user_dummy LOGIN NOSUPERUSER;
SET SESSION AUTHORIZATION 'regress_publication_user';
-- suppress warning that depends on wal_level
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub_default;
RESET client_min_messages;
COMMENT ON PUBLICATION testpub_default IS 'test publication';
SELECT obj_description(p.oid, 'pg_publication') FROM pg_publication p;
 obj_description  
------------------
 test publication
(1 row)

SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpib_ins_trunct WITH (publish = insert);
RESET client_min_messages;
ALTER PUBLICATION testpub_default SET (publish = update);
-- error cases
CREATE PUBLICATION testpub_xxx WITH (foo);
ERROR:  unrecognized publication parameter: "foo"
CREATE PUBLICATION testpub_xxx WITH (publish = 'cluster, vacuum');
ERROR:  unrecognized "publish" value: "cluster"
CREATE PUBLICATION testpub_xxx WITH (publish_via_partition_root = 'true', publish_via_partition_root = '0');
ERROR:  conflicting or redundant options
LINE 1: ...ub_xxx WITH (publish_via_partition_root = 'true', publish_vi...
                                                             ^
\dRp
                                              List of publications
        Name        |          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------+--------------------------+------------+---------+---------+---------+-----------+----------
 testpib_ins_trunct | regress_publication_user | f          | t       | f       | f       | f         | f
 testpub_default    | regress_publication_user | f          | f       | t       | f       | f         | f
(2 rows)

ALTER PUBLICATION testpub_default SET (publish = 'insert, update, delete');
\dRp
                                              List of publications
        Name        |          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------+--------------------------+------------+---------+---------+---------+-----------+----------
 testpib_ins_trunct | regress_publication_user | f          | t       | f       | f       | f         | f
 testpub_default    | regress_publication_user | f          | t       | t       | t       | f         | f
(2 rows)

--- adding tables
CREATE SCHEMA pub_test;
CREATE TABLE testpub_tbl1 (id serial primary key, data text);
CREATE TABLE pub_test.testpub_nopk (foo int, bar int);
CREATE VIEW testpub_view AS SELECT 1;
CREATE TABLE testpub_parted (a int) PARTITION BY LIST (a);
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub_foralltables FOR ALL TABLES WITH (publish = 'insert');
RESET client_min_messages;
ALTER PUBLICATION testpub_foralltables SET (publish = 'insert, update');
CREATE TABLE testpub_tbl2 (id serial primary key, data text);
-- fail - can't add to for all tables publication
ALTER PUBLICATION testpub_foralltables ADD TABLE testpub_tbl2;
ERROR:  publication "testpub_foralltables" is defined as FOR ALL TABLES
DETAIL:  Tables cannot be added to or dropped from FOR ALL TABLES publications.
-- fail - can't drop from all tables publication
ALTER PUBLICATION testpub_foralltables DROP TABLE testpub_tbl2;
ERROR:  publication "testpub_foralltables" is defined as FOR ALL TABLES
DETAIL:  Tables cannot be added to or dropped from FOR ALL TABLES publications.
-- fail - can't add to for all tables publication
ALTER PUBLICATION testpub_foralltables SET TABLE pub_test.testpub_nopk;
ERROR:  publication "testpub_foralltables" is defined as FOR ALL TABLES
DETAIL:  Tables cannot be added to or dropped from FOR ALL TABLES publications.
SELECT pubname, puballtables FROM pg_publication WHERE pubname = 'testpub_foralltables';
       pubname        | puballtables 
----------------------+--------------
 testpub_foralltables | t
(1 row)

\d+ testpub_tbl2
                                                Table "public.testpub_tbl2"
 Column |  Type   | Collation | Nullable |                 Default                  | Storage  | Stats target | Description 
--------+---------+-----------+----------+------------------------------------------+----------+--------------+-------------
 id     | integer |           | not null | nextval('testpub_tbl2_id_seq'::regclass) | plain    |              | 
 data   | text    |           |          |                                          | extended |              | 
Indexes:
    "testpub_tbl2_pkey" PRIMARY KEY, btree (id)
Publications:
    "testpub_foralltables"

\dRp+ testpub_foralltables
                              Publication testpub_foralltables
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | t          | t       | t       | f       | f         | f
(1 row)

DROP TABLE testpub_tbl2;
DROP PUBLICATION testpub_foralltables;
CREATE TABLE testpub_tbl3 (a int);
CREATE TABLE testpub_tbl3a (b text) INHERITS (testpub_tbl3);
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub3 FOR TABLE testpub_tbl3;
CREATE PUBLICATION testpub4 FOR TABLE ONLY testpub_tbl3;
RESET client_min_messages;
\dRp+ testpub3
                                    Publication testpub3
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | t         | f
Tables:
    "public.testpub_tbl3"
    "public.testpub_tbl3a"

\dRp+ testpub4
                                    Publication testpub4
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | t         | f
Tables:
    "public.testpub_tbl3"

DROP TABLE testpub_tbl3, testpub_tbl3a;
DROP PUBLICATION testpub3, testpub4;
-- Tests for partitioned tables
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub_forparted;
CREATE PUBLICATION testpub_forparted1;
RESET client_min_messages;
CREATE TABLE testpub_parted1 (LIKE testpub_parted);
CREATE TABLE testpub_parted2 (LIKE testpub_parted);
ALTER PUBLICATION testpub_forparted1 SET (publish='insert');
ALTER TABLE testpub_parted ATTACH PARTITION testpub_parted1 FOR VALUES IN (1);
ALTER TABLE testpub_parted ATTACH PARTITION testpub_parted2 FOR VALUES IN (2);
-- works despite missing REPLICA IDENTITY, because updates are not replicated
UPDATE testpub_parted1 SET a = 1;
-- only parent is listed as being in publication, not the partition
ALTER PUBLICATION testpub_forparted ADD TABLE testpub_parted;
\dRp+ testpub_forparted
                               Publication testpub_forparted
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | t         | f
Tables:
    "public.testpub_parted"

-- should now fail, because parent's publication replicates updates
UPDATE testpub_parted1 SET a = 1;
ERROR:  cannot update table "testpub_parted1" because it does not have a replica identity and publishes updates
HINT:  To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.
ALTER TABLE testpub_parted DETACH PARTITION testpub_parted1;
-- works again, because parent's publication is no longer considered
UPDATE testpub_parted1 SET a = 1;
ALTER PUBLICATION testpub_forparted SET (publish_via_partition_root = true);
\dRp+ testpub_forparted
                               Publication testpub_forparted
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | t         | t
Tables:
    "public.testpub_parted"

-- still fail, because parent's publication replicates updates
UPDATE testpub_parted2 SET a = 2;
ERROR:  cannot update table "testpub_parted2" because it does not have a replica identity and publishes updates
HINT:  To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.
ALTER PUBLICATION testpub_forparted DROP TABLE testpub_parted;
-- works again, because update is no longer replicated
UPDATE testpub_parted2 SET a = 2;
DROP TABLE testpub_parted1, testpub_parted2;
DROP PUBLICATION testpub_forparted, testpub_forparted1;
-- Test row filter for publications
CREATE TABLE testpub_rf_tbl1 (a integer, b text);
CREATE TABLE testpub_rf_tbl2 (c text, d integer);
CREATE TABLE testpub_rf_tbl3 (e integer);
CREATE TABLE testpub_rf_tbl4 (g text);
SET client_min_messages = 'ERROR';
-- Firstly, test using the option publish="insert" because the row filter
-- validation of referenced columns is less strict than for delete/update.
CREATE PUBLICATION testpub5 FOR TABLE testpub_rf_tbl1, testpub_rf_tbl2 WHERE (c <> 'test' AND d < 5) WITH (publish = "insert");
RESET client_min_messages;
\dRp+ testpub5
                                    Publication testpub5
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | f       | f       | f         | f
Tables:
    "public.testpub_rf_tbl1"
    "public.testpub_rf_tbl2" WHERE (((c <> 'test'::text) AND (d < 5)))

ALTER PUBLICATION testpub5 ADD TABLE testpub_rf_tbl3 WHERE (e > 1000 AND e < 2000);
\dRp+ testpub5
                                    Publication testpub5
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | f       | f       | f         | f
Tables:
    "public.testpub_rf_tbl1"
    "public.testpub_rf_tbl2" WHERE (((c <> 'test'::text) AND (d < 5)))
    "public.testpub_rf_tbl3" WHERE (((e > 1000) AND (e < 2000)))

ALTER PUBLICATION testpub5 DROP TABLE testpub_rf_tbl2;
\dRp+ testpub5
                                    Publication testpub5
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | f       | f       | f         | f
Tables:
    "public.testpub_rf_tbl1"
    "public.testpub_rf_tbl3" WHERE (((e > 1000) AND (e < 2000)))

-- remove testpub_rf_tbl1 and add testpub_rf_tbl3 again (another WHERE expression)
ALTER PUBLICATION testpub5 SET TABLE testpub_rf_tbl3 WHERE (e > 300 AND e < 500);
\dRp+ testpub5
                                    Publication testpub5
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | f       | f       | f         | f
Tables:
    "public.testpub_rf_tbl3" WHERE (((e > 300) AND (e < 500)))

-- fail - functions disallowed
ALTER PUBLICATION testpub5 ADD TABLE testpub_rf_tbl4 WHERE (length(g) < 6);
ERROR:  invalid publication WHERE expression for relation "testpub_rf_tbl4"
DETAIL:  function calls are not allowed
HINT:  only simple expressions using columns and constants are allowed
-- fail - user-defined operators disallowed
CREATE FUNCTION testpub_rf_func(integer, integer) RETURNS boolean AS $$ SELECT hashint4($1) > $2 $$ LANGUAGE SQL;
CREATE OPERATOR =#> (PROCEDURE = testpub_rf_func, LEFTARG = integer, RIGHTARG = integer);
CREATE PUBLICATION testpub6 FOR TABLE testpub_rf_tbl3 WHERE (e =#> 27);
ERROR:  invalid publication WHERE expression for relation "testpub_rf_tbl3"
DETAIL:  user-defined operators are not allowed
HINT:  only simple expressions using columns and constants are allowed
-- fail - row-filter expression is not simple
CREATE PUBLICATION testpub7 FOR TABLE testpub_rf_tbl1 WHERE (a IN (SELECT generate_series(1,5)));
ERROR:  invalid publication WHERE expression for relation "testpub_rf_tbl1"
DETAIL:  too complex
HINT:  only simple expressions using columns and constants are allowed
-- fail - WHERE not allowed in DROP
ALTER PUBLICATION testpub5 DROP TABLE testpub_rf_tbl3 WHERE (e < 27);
ERROR:  syntax error at or near "WHERE"
LINE 1: ...R PUBLICATION testpub5 DROP TABLE testpub_rf_tbl3 WHERE (e <...
                                                             ^
DROP TABLE testpub_rf_tbl1;
DROP TABLE testpub_rf_tbl2;
DROP TABLE testpub_rf_tbl3;
DROP TABLE testpub_rf_tbl4;
DROP PUBLICATION testpub5;
DROP OPERATOR =#>(integer, integer);
DROP FUNCTION testpub_rf_func(integer, integer);
-- ======================================================
-- More row filter tests for validating column references
CREATE TABLE rf_tbl_abcd_nopk(a int, b int, c int, d int);
CREATE TABLE rf_tbl_abcd_pk(a int, b int, c int, d int, PRIMARY KEY(a,b));
-- Case 1. REPLICA IDENTITY DEFAULT (means use primary key or nothing)
-- 1a. REPLICA IDENTITY is DEFAULT and table has a PK.
-- ok - "a" is a PK col
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (a > 99);
RESET client_min_messages;
DROP PUBLICATION testpub6;
-- ok - "b" is a PK col
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (b > 99);
RESET client_min_messages;
DROP PUBLICATION testpub6;
-- fail - "c" is not part of the PK
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (c > 99);
ERROR:  cannot add relation "rf_tbl_abcd_pk" to publication
DETAIL:  Row filter column "c" is not part of the REPLICA IDENTITY
-- fail - "d" is not part of the PK
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (d > 99);
ERROR:  cannot add relation "rf_tbl_abcd_pk" to publication
DETAIL:  Row filter column "d" is not part of the REPLICA IDENTITY
-- 1b. REPLICA IDENTITY is DEFAULT and table has no PK
-- fail - "a" is not part of REPLICA IDENTITY
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_nopk WHERE (a > 99);
ERROR:  cannot add relation "rf_tbl_abcd_nopk" to publication
DETAIL:  Row filter column "a" is not part of the REPLICA IDENTITY
-- Case 2. REPLICA IDENTITY FULL
ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY FULL;
ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY FULL;
-- ok - "c" is in REPLICA IDENTITY now even though not in PK
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (c > 99);
DROP PUBLICATION testpub6;
RESET client_min_messages;
-- ok - "a" is in REPLICA IDENTITY now
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_nopk WHERE (a > 99);
DROP PUBLICATION testpub6;
RESET client_min_messages;
-- Case 3. REPLICA IDENTITY NOTHING
ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY NOTHING;
ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY NOTHING;
-- fail - "a" is in PK but it is not part of REPLICA IDENTITY NOTHING
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (a > 99);
ERROR:  cannot add relation "rf_tbl_abcd_pk" to publication
DETAIL:  Row filter column "a" is not part of the REPLICA IDENTITY
-- fail - "c" is not in PK and not in REPLICA IDENTITY NOTHING
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (c > 99);
ERROR:  cannot add relation "rf_tbl_abcd_pk" to publication
DETAIL:  Row filter column "c" is not part of the REPLICA IDENTITY
-- fail - "a" is not in REPLICA IDENTITY NOTHING
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_nopk WHERE (a > 99);
ERROR:  cannot add relation "rf_tbl_abcd_nopk" to publication
DETAIL:  Row filter column "a" is not part of the REPLICA IDENTITY
-- Case 4. REPLICA IDENTITY INDEX
ALTER TABLE rf_tbl_abcd_pk ALTER COLUMN c SET NOT NULL;
CREATE UNIQUE INDEX idx_abcd_pk_c ON rf_tbl_abcd_pk(c);
ALTER TABLE rf_tbl_abcd_pk REPLICA IDENTITY USING INDEX idx_abcd_pk_c;
ALTER TABLE rf_tbl_abcd_nopk ALTER COLUMN c SET NOT NULL;
CREATE UNIQUE INDEX idx_abcd_nopk_c ON rf_tbl_abcd_nopk(c);
ALTER TABLE rf_tbl_abcd_nopk REPLICA IDENTITY USING INDEX idx_abcd_nopk_c;
-- fail - "a" is in PK but it is not part of REPLICA IDENTITY INDEX
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (a > 99);
ERROR:  cannot add relation "rf_tbl_abcd_pk" to publication
DETAIL:  Row filter column "a" is not part of the REPLICA IDENTITY
-- ok - "c" is not in PK but it is part of REPLICA IDENTITY INDEX
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_pk WHERE (c > 99);
DROP PUBLICATION testpub6;
RESET client_min_messages;
-- fail - "a" is not in REPLICA IDENTITY INDEX
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_nopk WHERE (a > 99);
ERROR:  cannot add relation "rf_tbl_abcd_nopk" to publication
DETAIL:  Row filter column "a" is not part of the REPLICA IDENTITY
-- ok - "c" is part of REPLICA IDENTITY INDEX
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub6 FOR TABLE rf_tbl_abcd_nopk WHERE (c > 99);
DROP PUBLICATION testpub6;
RESET client_min_messages;
DROP TABLE rf_tbl_abcd_pk;
DROP TABLE rf_tbl_abcd_nopk;
-- ======================================================
-- Test cache invalidation FOR ALL TABLES publication
SET client_min_messages = 'ERROR';
CREATE TABLE testpub_tbl4(a int);
INSERT INTO testpub_tbl4 values(1);
UPDATE testpub_tbl4 set a = 2;
CREATE PUBLICATION testpub_foralltables FOR ALL TABLES;
RESET client_min_messages;
-- fail missing REPLICA IDENTITY
UPDATE testpub_tbl4 set a = 3;
ERROR:  cannot update table "testpub_tbl4" because it does not have a replica identity and publishes updates
HINT:  To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.
DROP PUBLICATION testpub_foralltables;
-- should pass after dropping the publication
UPDATE testpub_tbl4 set a = 3;
DROP TABLE testpub_tbl4;
-- fail - view
CREATE PUBLICATION testpub_fortbl FOR TABLE testpub_view;
ERROR:  cannot add relation "testpub_view" to publication
DETAIL:  This operation is not supported for views.
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub_fortbl FOR TABLE testpub_tbl1, pub_test.testpub_nopk;
RESET client_min_messages;
-- fail - already added
ALTER PUBLICATION testpub_fortbl ADD TABLE testpub_tbl1;
ERROR:  relation "testpub_tbl1" is already member of publication "testpub_fortbl"
-- fail - already added
CREATE PUBLICATION testpub_fortbl FOR TABLE testpub_tbl1;
ERROR:  publication "testpub_fortbl" already exists
\dRp+ testpub_fortbl
                                 Publication testpub_fortbl
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | t         | f
Tables:
    "pub_test.testpub_nopk"
    "public.testpub_tbl1"

-- fail - view
ALTER PUBLICATION testpub_default ADD TABLE testpub_view;
ERROR:  cannot add relation "testpub_view" to publication
DETAIL:  This operation is not supported for views.
ALTER PUBLICATION testpub_default ADD TABLE testpub_tbl1;
ALTER PUBLICATION testpub_default SET TABLE testpub_tbl1;
ALTER PUBLICATION testpub_default ADD TABLE pub_test.testpub_nopk;
ALTER PUBLICATION testpib_ins_trunct ADD TABLE pub_test.testpub_nopk, testpub_tbl1;
\d+ pub_test.testpub_nopk
                              Table "pub_test.testpub_nopk"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 foo    | integer |           |          |         | plain   |              | 
 bar    | integer |           |          |         | plain   |              | 
Publications:
    "testpib_ins_trunct"
    "testpub_default"
    "testpub_fortbl"

\d+ testpub_tbl1
                                                Table "public.testpub_tbl1"
 Column |  Type   | Collation | Nullable |                 Default                  | Storage  | Stats target | Description 
--------+---------+-----------+----------+------------------------------------------+----------+--------------+-------------
 id     | integer |           | not null | nextval('testpub_tbl1_id_seq'::regclass) | plain    |              | 
 data   | text    |           |          |                                          | extended |              | 
Indexes:
    "testpub_tbl1_pkey" PRIMARY KEY, btree (id)
Publications:
    "testpib_ins_trunct"
    "testpub_default"
    "testpub_fortbl"

\dRp+ testpub_default
                                Publication testpub_default
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | f         | f
Tables:
    "pub_test.testpub_nopk"
    "public.testpub_tbl1"

ALTER PUBLICATION testpub_default DROP TABLE testpub_tbl1, pub_test.testpub_nopk;
-- fail - nonexistent
ALTER PUBLICATION testpub_default DROP TABLE pub_test.testpub_nopk;
ERROR:  relation "testpub_nopk" is not part of the publication
\d+ testpub_tbl1
                                                Table "public.testpub_tbl1"
 Column |  Type   | Collation | Nullable |                 Default                  | Storage  | Stats target | Description 
--------+---------+-----------+----------+------------------------------------------+----------+--------------+-------------
 id     | integer |           | not null | nextval('testpub_tbl1_id_seq'::regclass) | plain    |              | 
 data   | text    |           |          |                                          | extended |              | 
Indexes:
    "testpub_tbl1_pkey" PRIMARY KEY, btree (id)
Publications:
    "testpib_ins_trunct"
    "testpub_fortbl"

-- permissions
SET ROLE regress_publication_user2;
CREATE PUBLICATION testpub2;  -- fail
ERROR:  permission denied for database regression
SET ROLE regress_publication_user;
GRANT CREATE ON DATABASE regression TO regress_publication_user2;
SET ROLE regress_publication_user2;
SET client_min_messages = 'ERROR';
CREATE PUBLICATION testpub2;  -- ok
RESET client_min_messages;
ALTER PUBLICATION testpub2 ADD TABLE testpub_tbl1;  -- fail
ERROR:  must be owner of table testpub_tbl1
SET ROLE regress_publication_user;
GRANT regress_publication_user TO regress_publication_user2;
SET ROLE regress_publication_user2;
ALTER PUBLICATION testpub2 ADD TABLE testpub_tbl1;  -- ok
DROP PUBLICATION testpub2;
SET ROLE regress_publication_user;
REVOKE CREATE ON DATABASE regression FROM regress_publication_user2;
DROP TABLE testpub_parted;
DROP VIEW testpub_view;
DROP TABLE testpub_tbl1;
\dRp+ testpub_default
                                Publication testpub_default
          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
--------------------------+------------+---------+---------+---------+-----------+----------
 regress_publication_user | f          | t       | t       | t       | f         | f
(1 row)

-- fail - must be owner of publication
SET ROLE regress_publication_user_dummy;
ALTER PUBLICATION testpub_default RENAME TO testpub_dummy;
ERROR:  must be owner of publication testpub_default
RESET ROLE;
ALTER PUBLICATION testpub_default RENAME TO testpub_foo;
\dRp testpub_foo
                                           List of publications
    Name     |          Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
-------------+--------------------------+------------+---------+---------+---------+-----------+----------
 testpub_foo | regress_publication_user | f          | t       | t       | t       | f         | f
(1 row)

-- rename back to keep the rest simple
ALTER PUBLICATION testpub_foo RENAME TO testpub_default;
ALTER PUBLICATION testpub_default OWNER TO regress_publication_user2;
\dRp testpub_default
                                             List of publications
      Name       |           Owner           | All tables | Inserts | Updates | Deletes | Truncates | Via root 
-----------------+---------------------------+------------+---------+---------+---------+-----------+----------
 testpub_default | regress_publication_user2 | f          | t       | t       | t       | f         | f
(1 row)

DROP PUBLICATION testpub_default;
DROP PUBLICATION testpib_ins_trunct;
DROP PUBLICATION testpub_fortbl;
DROP SCHEMA pub_test CASCADE;
NOTICE:  drop cascades to table pub_test.testpub_nopk
RESET SESSION AUTHORIZATION;
DROP ROLE regress_publication_user, regress_publication_user2;
DROP ROLE regress_publication_user_dummy;
