-- Test building SCRAM functions
-- test all nulls
-- fail
SELECT scram_build_secret(NULL, NULL);
ERROR:  hash type must not be null
SELECT scram_build_secret('sha256', NULL);
ERROR:  password must not be null
SELECT scram_build_secret('sha256', NULL, NULL);
ERROR:  password must not be null
SELECT scram_build_secret('sha256', NULL, NULL, NULL);
ERROR:  password must not be null
-- test unsupported hashes
-- fail
SELECT scram_build_secret('sha384', 'password');
ERROR:  supported hashes are "sha256"
SELECT scram_build_secret('sha512', 'password');
ERROR:  supported hashes are "sha256"
-- generated a SCRAM secret from a plaintext password
SELECT regexp_replace(
  scram_build_secret('sha256', 'secret password'),
    '(SCRAM-SHA-256)\$(\d+):([a-zA-Z0-9+/=]+)\$([a-zA-Z0-9+=/]+):([a-zA-Z0-9+/=]+)',
    '\1$\2:<salt>$<storedkey>:<serverkey>') AS scram_secret;
                   scram_secret                    
---------------------------------------------------
 SCRAM-SHA-256$4096:<salt>$<storedkey>:<serverkey>
(1 row)

-- test building a SCRAM secret with a predefined salt with a valid base64
-- encoded string
SELECT scram_build_secret('sha256', 'secret password',
    decode('MTIzNDU2Nzg5MGFiY2RlZg==', 'base64'));
                                                          scram_build_secret                                                           
---------------------------------------------------------------------------------------------------------------------------------------
 SCRAM-SHA-256$4096:MTIzNDU2Nzg5MGFiY2RlZg==$D5BmucT796UQKargx2k3fdqjDYR7cH/L0viKKhGo6kA=:M33+iHFOESP8C3DKLDb2k5QAhkNVWEbp/YUIFd2CxN4=
(1 row)

-- test building a SCRAM secret with a predefined salt that is not a valid
-- base64 string
-- fail
SELECT scram_build_secret('sha256', 'secret password',
  decode('abc', 'base64'));
ERROR:  invalid base64 end sequence
HINT:  Input data is missing padding, is truncated, or is otherwise corrupted.
-- test building a SCRAM secret with a salt that looks like a string but is
-- cast to a bytea
SELECT scram_build_secret('sha256', 'secret password', 'abc');
                                                scram_build_secret                                                 
-------------------------------------------------------------------------------------------------------------------
 SCRAM-SHA-256$4096:YWJj$L27WlKwqjMDY5ZNsyaxGSMii2mhmoUB7xONbxjykmw4=:u1ofGUXUqTbMwfiH+ANWDCpwEjk3j1Xrocy3va/jaCU=
(1 row)

-- test building a SCRAM secret with a bytea salt using the hex format
SELECT scram_build_secret('sha256', 'secret password', '\xabba5432');
                                                  scram_build_secret                                                   
-----------------------------------------------------------------------------------------------------------------------
 SCRAM-SHA-256$4096:q7pUMg==$05Nb9QHwHkMA0CRcYaEfwtgZ+3kStIefz8fLMjTEtio=:P126h1ycyP938E69yxktEfhoAILbiwL/UMsMk3Efb6o=
(1 row)

-- test building a SCRAM secret with a valid salt and a different set of
-- iterations
SELECT scram_build_secret('sha256', 'secret password',
  decode('MTIzNDU2Nzg5MGFiY2RlZg==', 'base64'), 10000);
                                                           scram_build_secret                                                           
----------------------------------------------------------------------------------------------------------------------------------------
 SCRAM-SHA-256$10000:MTIzNDU2Nzg5MGFiY2RlZg==$9NkDu1TFpx3L30zMgHUqjRNSq3GRZRrdWU4TuGOnT3Q=:svuIH9L6HH8loyKWguT64XXoOLCrr4FkVViPd2JVR4M=
(1 row)

-- test what happens when the salt is a NULL value.
-- this should build a SCRAM secret using a random salt.
SELECT regexp_replace(
  scram_build_secret('sha256', 'secret password', NULL, 10000),
    '(SCRAM-SHA-256)\$(\d+):([a-zA-Z0-9+/=]{24})\$([a-zA-Z0-9+=/]+):([a-zA-Z0-9+/=]+)',
    '\1$\2:<salt>$<storedkey>:<serverkey>') AS scram_secret;
                    scram_secret                    
----------------------------------------------------
 SCRAM-SHA-256$10000:<salt>$<storedkey>:<serverkey>
(1 row)

-- test what happens when iterations is a null value. this should set iterations
-- to be the default, currently 4096.
SELECT
  scram_build_secret('sha256', 'secret password',
    decode('MTIzNDU2Nzg5MGFiY2RlZg==', 'base64'), NULL) ~
  '^SCRAM-SHA-256\$4096' AS has_default_iterations;
 has_default_iterations 
------------------------
 t
(1 row)

-- skip the remaining tests if this not a UTF8 server
SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
\if :skip_test
\quit
