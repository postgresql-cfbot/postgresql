Parsed test spec with 2 sessions

starting permutation: s1_begin s1_create_function_in_schema s2_drop_schema s1_commit
step s1_begin: BEGIN;
step s1_create_function_in_schema: CREATE FUNCTION testschema.foo() RETURNS int AS 'select 1' LANGUAGE sql;
step s2_drop_schema: DROP SCHEMA testschema; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_schema: <... completed>
ERROR:  cannot drop schema testschema because other objects depend on it

starting permutation: s2_begin s2_drop_schema s1_create_function_in_schema s2_commit
step s2_begin: BEGIN;
step s2_drop_schema: DROP SCHEMA testschema;
step s1_create_function_in_schema: CREATE FUNCTION testschema.foo() RETURNS int AS 'select 1' LANGUAGE sql; <waiting ...>
step s2_commit: COMMIT;
step s1_create_function_in_schema: <... completed>
ERROR:  schema testschema does not exist

starting permutation: s1_begin s1_alter_function_schema s2_drop_alterschema s1_commit
step s1_begin: BEGIN;
step s1_alter_function_schema: ALTER FUNCTION public.falter() SET SCHEMA alterschema;
step s2_drop_alterschema: DROP SCHEMA alterschema; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_alterschema: <... completed>
ERROR:  cannot drop schema alterschema because other objects depend on it

starting permutation: s2_begin s2_drop_alterschema s1_alter_function_schema s2_commit
step s2_begin: BEGIN;
step s2_drop_alterschema: DROP SCHEMA alterschema;
step s1_alter_function_schema: ALTER FUNCTION public.falter() SET SCHEMA alterschema; <waiting ...>
step s2_commit: COMMIT;
step s1_alter_function_schema: <... completed>
ERROR:  schema alterschema does not exist

starting permutation: s1_begin s1_create_function_with_argtype s2_drop_foo_type s1_commit
step s1_begin: BEGIN;
step s1_create_function_with_argtype: CREATE FUNCTION fooargtype(num foo) RETURNS int AS 'select 1' LANGUAGE sql;
step s2_drop_foo_type: DROP TYPE public.foo; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_foo_type: <... completed>
ERROR:  cannot drop type foo because other objects depend on it

starting permutation: s2_begin s2_drop_foo_type s1_create_function_with_argtype s2_commit
step s2_begin: BEGIN;
step s2_drop_foo_type: DROP TYPE public.foo;
step s1_create_function_with_argtype: CREATE FUNCTION fooargtype(num foo) RETURNS int AS 'select 1' LANGUAGE sql; <waiting ...>
step s2_commit: COMMIT;
step s1_create_function_with_argtype: <... completed>
ERROR:  type foo does not exist

starting permutation: s1_begin s1_create_function_with_rettype s2_drop_foo_rettype s1_commit
step s1_begin: BEGIN;
step s1_create_function_with_rettype: CREATE FUNCTION footrettype() RETURNS id LANGUAGE sql RETURN 1;
step s2_drop_foo_rettype: DROP DOMAIN id; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_foo_rettype: <... completed>
ERROR:  cannot drop type id because other objects depend on it

starting permutation: s2_begin s2_drop_foo_rettype s1_create_function_with_rettype s2_commit
step s2_begin: BEGIN;
step s2_drop_foo_rettype: DROP DOMAIN id;
step s1_create_function_with_rettype: CREATE FUNCTION footrettype() RETURNS id LANGUAGE sql RETURN 1; <waiting ...>
step s2_commit: COMMIT;
step s1_create_function_with_rettype: <... completed>
ERROR:  type id does not exist

starting permutation: s1_begin s1_create_function_with_function s2_drop_function_f s1_commit
step s1_begin: BEGIN;
step s1_create_function_with_function: CREATE FUNCTION foofunc() RETURNS int LANGUAGE SQL RETURN f() + 1;
step s2_drop_function_f: DROP FUNCTION f(); <waiting ...>
step s1_commit: COMMIT;
step s2_drop_function_f: <... completed>
ERROR:  cannot drop function f() because other objects depend on it

starting permutation: s2_begin s2_drop_function_f s1_create_function_with_function s2_commit
step s2_begin: BEGIN;
step s2_drop_function_f: DROP FUNCTION f();
step s1_create_function_with_function: CREATE FUNCTION foofunc() RETURNS int LANGUAGE SQL RETURN f() + 1; <waiting ...>
step s2_commit: COMMIT;
step s1_create_function_with_function: <... completed>
ERROR:  function f() does not exist

starting permutation: s1_begin s1_create_domain_with_domain s2_drop_domain_id s1_commit
step s1_begin: BEGIN;
step s1_create_domain_with_domain: CREATE DOMAIN idid as id;
step s2_drop_domain_id: DROP DOMAIN id; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_domain_id: <... completed>
ERROR:  cannot drop type id because other objects depend on it

starting permutation: s2_begin s2_drop_domain_id s1_create_domain_with_domain s2_commit
step s2_begin: BEGIN;
step s2_drop_domain_id: DROP DOMAIN id;
step s1_create_domain_with_domain: CREATE DOMAIN idid as id; <waiting ...>
step s2_commit: COMMIT;
step s1_create_domain_with_domain: <... completed>
ERROR:  type id does not exist

starting permutation: s1_begin s1_create_table_with_type s2_drop_footab_type s1_commit
step s1_begin: BEGIN;
step s1_create_table_with_type: CREATE TABLE tabtype(a footab);
step s2_drop_footab_type: DROP TYPE public.footab; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_footab_type: <... completed>
ERROR:  cannot drop type footab because other objects depend on it

starting permutation: s2_begin s2_drop_footab_type s1_create_table_with_type s2_commit
step s2_begin: BEGIN;
step s2_drop_footab_type: DROP TYPE public.footab;
step s1_create_table_with_type: CREATE TABLE tabtype(a footab); <waiting ...>
step s2_commit: COMMIT;
step s1_create_table_with_type: <... completed>
ERROR:  type footab does not exist

starting permutation: s1_begin s1_create_server_with_fdw_wrapper s2_drop_fdw_wrapper s1_commit
step s1_begin: BEGIN;
step s1_create_server_with_fdw_wrapper: CREATE SERVER srv_fdw_wrapper FOREIGN DATA WRAPPER fdw_wrapper;
step s2_drop_fdw_wrapper: DROP FOREIGN DATA WRAPPER fdw_wrapper RESTRICT; <waiting ...>
step s1_commit: COMMIT;
step s2_drop_fdw_wrapper: <... completed>
ERROR:  cannot drop foreign-data wrapper fdw_wrapper because other objects depend on it

starting permutation: s2_begin s2_drop_fdw_wrapper s1_create_server_with_fdw_wrapper s2_commit
step s2_begin: BEGIN;
step s2_drop_fdw_wrapper: DROP FOREIGN DATA WRAPPER fdw_wrapper RESTRICT;
step s1_create_server_with_fdw_wrapper: CREATE SERVER srv_fdw_wrapper FOREIGN DATA WRAPPER fdw_wrapper; <waiting ...>
step s2_commit: COMMIT;
step s1_create_server_with_fdw_wrapper: <... completed>
ERROR:  foreign-data wrapper fdw_wrapper does not exist
